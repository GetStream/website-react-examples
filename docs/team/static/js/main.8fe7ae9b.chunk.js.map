{"version":3,"sources":["assets/userImages/photo-1438761681033-6461ffad8d80.jpeg","assets/userImages/photo-1463453091185-61582044d556.jpeg","assets/userImages/photo-1503467913725-8484b65b0715.jpeg","assets/userImages/photo-1519345182560-3f2917c472ef.jpeg","assets/userImages/photo-1506089676908-3592f7389d4d.jpeg","assets/userImages/photo-1507003211169-0a1dd7228f2d.jpeg","assets/userImages/photo-1517202383675-eb0a6e27775f.jpeg","assets/userImages/photo-1531251445707-1f000e1e87d0.jpeg","assets/userImages/photo-1541271696563-3be2f555fc4e.jpeg","assets/userImages/photo-1542345812-d98b5cd6cf98.jpeg","assets/userImages/photo-1546539782-6fc531453083.jpeg","assets/userImages/photo-1546623381-d6d69cd69955.jpeg","assets/userImages/photo-1546820389-44d77e1f3b31.jpeg","assets/userImages/photo-1548946526-f69e2424cf45.jpeg","assets/userImages/photo-1549351236-caca0f174515.jpeg","assets/userImages/photo-1551069613-1904dbdcda11.jpeg","assets/userImages/photo-1554384645-13eab165c24b.jpeg","assets/userImages/photo-1569443693539-175ea9f007e8.jpeg","assets/userImages/photo-1573140247632-f8fd74997d5c.jpeg","assets/userImages/photo-1546456073-6712f79251bb.jpeg","assets/userImages/photo-1502378735452-bc7d86632805.jpeg","assets/userImages/photo-1546967191-fdfb13ed6b1e.jpeg","assets/userImages/photo-1502937406922-305bb2789e95.jpeg","assets/userImages/photo-1552058544-f2b08422138a.jpeg","assets/PinIcon.tsx","assets/SearchIcon.tsx","assets/index.ts","ChecklistTasks.ts","context/WorkspaceController.tsx","components/AdminPanel/context/AdminPanelFormContext.tsx","components/AdminPanel/CloseAdminPanelButton.tsx","components/AdminPanel/AdminPanelHeader.tsx","components/AdminPanel/AdminPanelFooter.tsx","components/AdminPanel/ValidationError.tsx","components/AdminPanel/ChannelNameInputField.tsx","components/AdminPanel/UserList.tsx","components/AdminPanel/CreateChannel.tsx","components/AdminPanel/EditChannel.tsx","components/AdminPanel/AdminPanel.tsx","components/TeamChannelHeader/CloseThreadButton.tsx","components/TeamMessage/PinIndicator.tsx","components/TeamMessage/TeamMessage.tsx","components/PinnedMessageList/PinnedMessageList.tsx","components/TeamChannelHeader/ChannelInfoIcon.tsx","components/TeamChannelHeader/TeamChannelHeader.tsx","components/TeamMessageInput/LightningBoltIcon.tsx","components/TeamMessageInput/GiphyBadge.tsx","components/TeamMessageInput/MessageInputControls.tsx","components/TeamMessageInput/SendButtonIcon.tsx","context/GiphyInMessageFlagContext.tsx","components/TeamMessageInput/ThreadMessageInput.tsx","components/ChannelContainer/ChannelInner.tsx","components/EmptyChannel/HashIcon.tsx","components/EmptyChannel/EmptyChannel.tsx","components/TeamMessageInput/TeamMessageInput.tsx","components/TeamMessageInput/hooks/useMessageInputCompositionControls.ts","components/TeamTypingIndicator/TeamTypingIndicator.tsx","components/TeamChannelHeader/ThreadHeader.tsx","components/ChannelContainer/ChannelContainer.tsx","components/ChannelSearch/utils.tsx","components/ChannelSearch/ResultsDropdown.tsx","components/ChannelSearch/ChannelSearch.tsx","components/TeamChannelList/AddChannelButton.tsx","components/TeamChannelList/TeamChannelList.tsx","components/ChannelPreview/DirectMessagingChannelPreview.tsx","components/ChannelPreview/TeamChannelPreview.tsx","components/ChannelPreview/ChannelPreview.tsx","components/Sidebar/icons.tsx","components/Sidebar/Sidebar.tsx","App.tsx","index.tsx"],"names":["PinIcon","width","height","viewBox","fill","xmlns","d","SearchIcon","fillOpacity","fillRule","clipRule","randomImages","Avatar1","Avatar2","Avatar3","Avatar4","Avatar5","Avatar6","Avatar7","Avatar8","Avatar9","Avatar10","Avatar11","Avatar12","Avatar13","Avatar14","Avatar15","Avatar16","Avatar17","Avatar18","Avatar19","Avatar20","Avatar21","Avatar22","Avatar23","Avatar24","useChecklist","props","chatClient","targetOrigin","useEffect","parent","notify","message","window","postMessage","handleNewEvent","type","command","attachments","length","og_scrape_url","parent_id","on","off","noop","Promise","resolve","WorkspaceControllerContext","React","createContext","activeWorkspace","closeAdminPanel","displayWorkspace","pinnedMessageListOpen","togglePinnedMessageListOpen","closePinnedMessageListOpen","WorkspaceController","children","useState","setActiveWorkspace","setPinnedMessageListOpen","useCallback","workspace","prev","Provider","value","useWorkspaceController","useContext","Context","handleInputChange","handleMemberSelect","handleSubmit","members","name","errors","AdminPanelForm","defaultValues","onSubmit","useChatContext","client","channel","setActiveChannel","setChannelName","setMembers","setErrors","createChannelType","match","getChannelTypeFromWorkspaceName","action","getUpsertAction","createChannel","demo","newChannel","watch","updateChannel","data","id","update","text","addMembers","validateForm","values","Object","some","v","event","preventDefault","console","error","target","prevMembers","checked","filter","prevUser","useAdminPanelFormState","CloseAdminPanelButton","onClick","AdminPanelHeader","onClose","title","className","AdminPanelFooter","buttonText","onButtonClick","ValidationError","errorMessage","ChannelNameInputField","placeholder","onChange","ListContainer","showHeading","MOCKED_LAST_ACTIVE_STRINGS","UserItem","index","user","lastActive","htmlFor","Avatar","image","size","LOAD_STATE_NOTIFICATION","empty","loading","UserList","loadState","setLoadState","users","setUsers","channelMembers","useMemo","state","keys","getUsers","queryUsers","$nin","limit","response","map","i","CreateChannel","EditChannel","AdminPanel","defaultFormValues","Form","userID","CloseThreadButton","x","y","stroke","rx","PinIndicator","pinned_by","MessageTeamWithContext","clearEditingState","editing","getMessageActions","groupStyles","handleAction","handleOpenThread","handleRetry","initialMessage","isReactionEnabled","messageWrapperRef","onMentionsClickMessage","onMentionsHoverMessage","onReactionListClick","onUserClick","onUserHover","reactionSelectorRef","renderText","defaultRenderText","showDetailedReactions","threadList","Attachment","useComponentContext","useTranslationContext","t","userLanguage","messageActions","showActionsBox","showMessageActionsBox","shouldShowReplies","indexOf","MESSAGE_ACTIONS","reply","messageTextToRender","i18n","messageMentionedUsersItem","mentioned_users","messageText","firstGroupStyle","deleted_at","MessageDeleted","onMouseOver","MessageInput","Input","EditMessageForm","rootClass","clsx","pinned","status","ref","style","marginRight","MessageTimestamp","ReactionSelector","MessageActions","inline","isOnlyEmojis","actionHandler","latest_reactions","SimpleReactionsList","errorStatusCode","undefined","MessageStatus","messageType","MessageRepliesCountButton","reply_count","MemoizedMessageTeam","memo","areMessageUIPropsEqual","TeamMessage","messageContext","useMessageContext","useRef","useReactionClick","PinnedMessageList","useChannelStateContext","pinnedMessages","Message","ChannelInfoIcon","TeamChannelHeader","watchers","watcher_count","closeThread","useChannelActionContext","teamHeader","openChannelEditPanel","onPinIconClick","additionalMembers","getMessagingHeader","LightningBoltIcon","GiphyBadge","ControlsIcons","bold","code","emoji","italics","MessageInputControlButton","forwardRef","active","Icon","SendButtonIcon","GiphyInMessageFlagContext","GiphyInMessageFlagProvider","giphyState","setGiphyState","clearGiphyFlag","isReply","clearGiphyFlagMainInput","clearGiphyFlagThread","inputHasGiphyMessage","isComposingGiphyMessage","isComposingGiphyReply","setComposeGiphyMessageFlag","setComposeGiphyReplyFlag","useGiphyInMessageContext","ThreadMessageInput","messageInput","useMessageInputContext","openEmojiPicker","closeEmojiPicker","emojiPickerIsOpen","referenceElement","setReferenceElement","popperElement","setPopperElement","usePopper","placement","styles","attributes","deletePressed","nativeEvent","InputEvent","inputType","startsWith","log","replace","handleChange","ChatAutoComplete","disabled","numberOfUploads","popper","EmojiPicker","ChannelInner","sendMessage","teamPermissions","defaultPinPermissions","team","messagingPermissions","messaging","pinnedPermissions","overrideSubmitHandler","updatedMessage","updatedText","sendMessagePromise","logChatPromiseExecution","Window","MessageList","disableQuotedMessages","pinPermissions","grow","Thread","additionalMessageInputProps","HashIcon","cx","cy","r","EmptyChannel","member","memberString","forEach","getUserText","TeamMessageInput","TypingIndicator","acceptedFiles","multipleUploads","uploadNewFiles","maxFilesLeft","isUploadEnabled","formatting","setFormatting","dynamicPart","slice","handleBoldButtonClick","handleItalicsButtonClick","handleStrikeThroughButtonClick","handleCodeButtonClick","useMessageInputCompositionControls","accept","reduce","mediaTypeMap","mediaType","useDropzone","multiple","noClick","onDrop","getRootProps","isDragActive","isDragReject","AttachmentPreviewList","TeamTypingIndicator","typing","useTypingContext","ThreadHeader","thread","LoadingIndicator","ChannelContainer","Channel","EmptyStateIndicator","ReactionsList","isChannel","cid","channelByUser","filters","member_count","$eq","queryChannels","existingChannel","SearchResult","focusedId","result","setChannel","highlighted","ResultsDropdown","teamChannels","directChannels","setQuery","document","addEventListener","ChannelSearch","allChannels","setAllChannels","setTeamChannels","setDirectChannels","focused","setFocused","setFocusedId","setLoading","query","handleKeyDown","key","prevFocused","channelToCheck","removeEventListener","getChannels","channelResponse","$autocomplete","userResponse","$ne","$and","all","channels","getChannelsDebounce","_debounce","trailing","AddChannelButton","ChannelList","handleAddChannelClick","TeamChannelList","DirectMessagingChannelPreview","defaultName","TeamChannelPreview","ChannelPreview","activeChannel","handleClick","selected","CompanyLogo","options","presence","sort","last_message_at","updated_at","FakeCompanySelectionBar","customChannelTeamFilter","customChannelMessagingFilter","TeamChannelsList","channelRenderFilterFn","List","listProps","Preview","previewProps","MessagingChannelsList","setActiveChannelOnMount","Sidebar","urlParams","URLSearchParams","location","search","apiKey","get","process","REACT_APP_USER_ID","theme","userToken","REACT_APP_USER_TOKEN","REACT_APP_TARGET_ORIGIN","i18nInstance","Streami18n","language","translationsForLanguage","enTranslations","StreamChat","getInstance","enableInsights","enableWSFallback","connectUser","Math","floor","random","randomImage","getRandomImage","App","handleColorChange","color","root","documentElement","setProperty","disconnectUser","Chat","createRoot","getElementById","render"],"mappings":"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","file":"static/js/main.8fe7ae9b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/photo-1438761681033-6461ffad8d80.613ac608.jpeg\";","export default __webpack_public_path__ + \"static/media/photo-1463453091185-61582044d556.3619e52a.jpeg\";","export default __webpack_public_path__ + \"static/media/photo-1503467913725-8484b65b0715.95ccd4b9.jpeg\";","export default __webpack_public_path__ + \"static/media/photo-1519345182560-3f2917c472ef.a2e6c02e.jpeg\";","export default __webpack_public_path__ + \"static/media/photo-1506089676908-3592f7389d4d.56a08c5d.jpeg\";","export default __webpack_public_path__ + \"static/media/photo-1507003211169-0a1dd7228f2d.63bee4f7.jpeg\";","export default __webpack_public_path__ + \"static/media/photo-1517202383675-eb0a6e27775f.4457c8ec.jpeg\";","export default __webpack_public_path__ + \"static/media/photo-1531251445707-1f000e1e87d0.be76211f.jpeg\";","export default __webpack_public_path__ + \"static/media/photo-1541271696563-3be2f555fc4e.24ecd158.jpeg\";","export default __webpack_public_path__ + \"static/media/photo-1542345812-d98b5cd6cf98.fc631d3d.jpeg\";","export default __webpack_public_path__ + \"static/media/photo-1546539782-6fc531453083.a7c849be.jpeg\";","export default __webpack_public_path__ + \"static/media/photo-1546623381-d6d69cd69955.84098cf1.jpeg\";","export default __webpack_public_path__ + \"static/media/photo-1546820389-44d77e1f3b31.879865ae.jpeg\";","export default __webpack_public_path__ + \"static/media/photo-1548946526-f69e2424cf45.c592c0d0.jpeg\";","export default __webpack_public_path__ + \"static/media/photo-1549351236-caca0f174515.d2fd8a6e.jpeg\";","export default __webpack_public_path__ + \"static/media/photo-1551069613-1904dbdcda11.6380bd9d.jpeg\";","export default __webpack_public_path__ + \"static/media/photo-1554384645-13eab165c24b.f45d7937.jpeg\";","export default __webpack_public_path__ + \"static/media/photo-1569443693539-175ea9f007e8.da18bfdc.jpeg\";","export default __webpack_public_path__ + \"static/media/photo-1573140247632-f8fd74997d5c.79b738bd.jpeg\";","export default __webpack_public_path__ + \"static/media/photo-1546456073-6712f79251bb.a031da78.jpeg\";","export default __webpack_public_path__ + \"static/media/photo-1502378735452-bc7d86632805.905b3e52.jpeg\";","export default __webpack_public_path__ + \"static/media/photo-1546967191-fdfb13ed6b1e.f4b6002c.jpeg\";","export default __webpack_public_path__ + \"static/media/photo-1502937406922-305bb2789e95.647d289b.jpeg\";","export default __webpack_public_path__ + \"static/media/photo-1552058544-f2b08422138a.ebadf7d3.jpeg\";","export const PinIcon = () => (\n  <svg width='14' height='13' viewBox='0 0 14 13' fill='none' xmlns='http://www.w3.org/2000/svg'>\n    <path\n      d='M13.3518 6.686L6.75251 0.0866699L5.80984 1.02867L6.75318 1.972V1.97334L3.45318 5.272L3.45251 5.27334L2.50984 4.32934L1.56718 5.27267L4.39584 8.10067L0.624512 11.8713L1.56718 12.814L5.33851 9.04334L8.16718 11.8713L9.10984 10.9293L8.16718 9.986L11.4672 6.686L12.4098 7.62867L13.3518 6.686ZM7.22451 9.04267L7.22385 9.04334L4.39584 6.21467L7.69518 2.91467L10.5232 5.74267L7.22451 9.04267Z'\n      fill='#858688'\n    />\n  </svg>\n);\n","export const SearchIcon = () => (\n  <svg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='none' viewBox='0 0 16 16'>\n    <path\n      fill='#fff'\n      fillOpacity='0.66'\n      fillRule='evenodd'\n      d='M2.7 6.95a4.25 4.25 0 117.306 2.954 1.001 1.001 0 00-.102.102A4.25 4.25 0 012.7 6.95zm7.906 5.07a6.25 6.25 0 111.414-1.414l2.987 2.987a1 1 0 11-1.414 1.414l-2.987-2.987z'\n      clipRule='evenodd'\n    ></path>\n  </svg>\n);\n","import Avatar1 from '../assets/userImages/photo-1438761681033-6461ffad8d80.jpeg';\nimport Avatar2 from '../assets/userImages/photo-1463453091185-61582044d556.jpeg';\nimport Avatar3 from '../assets/userImages/photo-1503467913725-8484b65b0715.jpeg';\nimport Avatar4 from '../assets/userImages/photo-1519345182560-3f2917c472ef.jpeg';\nimport Avatar5 from '../assets/userImages/photo-1506089676908-3592f7389d4d.jpeg';\nimport Avatar6 from '../assets/userImages/photo-1507003211169-0a1dd7228f2d.jpeg';\nimport Avatar7 from '../assets/userImages/photo-1517202383675-eb0a6e27775f.jpeg';\nimport Avatar8 from '../assets/userImages/photo-1531251445707-1f000e1e87d0.jpeg';\nimport Avatar9 from '../assets/userImages/photo-1541271696563-3be2f555fc4e.jpeg';\nimport Avatar10 from '../assets/userImages/photo-1542345812-d98b5cd6cf98.jpeg';\nimport Avatar11 from '../assets/userImages/photo-1546539782-6fc531453083.jpeg';\nimport Avatar12 from '../assets/userImages/photo-1546623381-d6d69cd69955.jpeg';\nimport Avatar13 from '../assets/userImages/photo-1546820389-44d77e1f3b31.jpeg';\nimport Avatar14 from '../assets/userImages/photo-1548946526-f69e2424cf45.jpeg';\nimport Avatar15 from '../assets/userImages/photo-1549351236-caca0f174515.jpeg';\nimport Avatar16 from '../assets/userImages/photo-1551069613-1904dbdcda11.jpeg';\nimport Avatar17 from '../assets/userImages/photo-1554384645-13eab165c24b.jpeg';\nimport Avatar18 from '../assets/userImages/photo-1569443693539-175ea9f007e8.jpeg';\nimport Avatar19 from '../assets/userImages/photo-1573140247632-f8fd74997d5c.jpeg';\nimport Avatar20 from '../assets/userImages/photo-1546456073-6712f79251bb.jpeg';\nimport Avatar21 from '../assets/userImages/photo-1502378735452-bc7d86632805.jpeg';\nimport Avatar22 from '../assets/userImages/photo-1546967191-fdfb13ed6b1e.jpeg';\nimport Avatar23 from '../assets/userImages/photo-1502937406922-305bb2789e95.jpeg';\nimport Avatar24 from '../assets/userImages/photo-1552058544-f2b08422138a.jpeg';\n\nexport { PinIcon } from './PinIcon';\nexport { SearchIcon } from './SearchIcon';\n\nconst randomImages = [\n  Avatar1,\n  Avatar2,\n  Avatar3,\n  Avatar4,\n  Avatar5,\n  Avatar6,\n  Avatar7,\n  Avatar8,\n  Avatar9,\n  Avatar10,\n  Avatar11,\n  Avatar12,\n  Avatar13,\n  Avatar14,\n  Avatar15,\n  Avatar16,\n  Avatar17,\n  Avatar18,\n  Avatar19,\n  Avatar20,\n  Avatar21,\n  Avatar22,\n  Avatar23,\n  Avatar24,\n];\n\nexport const getRandomImage = () => {\n  const index = Math.floor(Math.random() * 24);\n  const randomImage = randomImages[index];\n\n  if (typeof randomImage === 'string') {\n    return randomImage;\n  }\n\n  return '';\n};\n","import { useEffect } from 'react';\n\nimport type { Event, StreamChat } from 'stream-chat';\n\nimport type { StreamChatType } from './types';\n\nconst notifyParent = (parent: string) => (message: any) => {\n  window.parent.postMessage(message, parent);\n};\n\nconst YOUTUBE_LINK = 'https://youtu.be/Ujvy-DEA-UM';\n\n// We have to keep this task list up-to-date with the website's checklist\nconst [REACT_TO_MESSAGE, RUN_GIPHY, SEND_YOUTUBE, DRAG_DROP, START_THREAD, SEND_MESSAGE] = [\n  'react-to-message',\n  'run-giphy',\n  'send-youtube',\n  'drag-drop-image',\n  'start-thread',\n  'send-message',\n];\n\ntype ChecklistTaskProps = {\n  chatClient: StreamChat<StreamChatType>;\n  targetOrigin: string;\n};\n\nexport const useChecklist = (props: ChecklistTaskProps): void => {\n  const { chatClient, targetOrigin } = props;\n\n  useEffect(() => {\n    const notify = notifyParent(targetOrigin);\n\n    const handleNewEvent = (\n      props: Event<StreamChatType>,\n    ) => {\n      const { message, type } = props;\n\n      switch (type) {\n        case 'reaction.new':\n          notify(REACT_TO_MESSAGE);\n          break;\n        case 'message.new':\n          if (message?.command === 'giphy') {\n            notify(RUN_GIPHY);\n            break;\n          }\n          if (message?.attachments?.length) {\n            if (\n              message.attachments[0].type === 'video' &&\n              message.attachments[0].og_scrape_url === YOUTUBE_LINK\n            ) {\n              notify(SEND_YOUTUBE);\n              break;\n            }\n            if (message.attachments[0].type === 'image') {\n              notify(DRAG_DROP);\n              break;\n            }\n          }\n          if (message?.parent_id) {\n            notify(START_THREAD);\n            break;\n          }\n          notify(SEND_MESSAGE);\n          break;\n        default:\n          break;\n      }\n    };\n    if (chatClient) {\n      chatClient.on(handleNewEvent);\n    }\n    return () => chatClient?.off(handleNewEvent);\n  }, [chatClient, targetOrigin]);\n};\n","import React, { useCallback, useContext, useState } from 'react';\n\nconst noop = () => Promise.resolve();\n\nexport type Workspace = 'Chat' | 'Admin-Channel-Edit' | 'Admin-Channel-Create__team' | 'Admin-Channel-Create__messaging';\n\ntype WorkspaceContext = {\n  activeWorkspace: Workspace;\n  closeAdminPanel: () => void;\n  displayWorkspace: (w: Workspace) => void;\n  pinnedMessageListOpen: boolean;\n  togglePinnedMessageListOpen: () => void;\n  closePinnedMessageListOpen: () => void;\n}\n\nconst WorkspaceControllerContext = React.createContext<WorkspaceContext>({\n  activeWorkspace: 'Chat',\n  closeAdminPanel: noop,\n  displayWorkspace: noop,\n  pinnedMessageListOpen: false,\n  togglePinnedMessageListOpen: noop,\n  closePinnedMessageListOpen: noop,\n});\n\n\nexport const WorkspaceController = ({ children }: { children: React.ReactNode }) => {\n  const [activeWorkspace, setActiveWorkspace] = useState<Workspace>('Chat');\n  const [pinnedMessageListOpen, setPinnedMessageListOpen] = useState(false);\n\n  const displayWorkspace: WorkspaceContext['displayWorkspace'] = useCallback((workspace) => {\n    setActiveWorkspace(workspace);\n    setPinnedMessageListOpen(false);\n  }, [setActiveWorkspace]);\n\n  const closeAdminPanel = useCallback(() => {\n    displayWorkspace('Chat');\n  }, [displayWorkspace]);\n\n  const togglePinnedMessageListOpen = useCallback(() => setPinnedMessageListOpen((prev) => !prev), []);\n  const closePinnedMessageListOpen = useCallback(() => setPinnedMessageListOpen(false), []);\n\n  return (\n    <WorkspaceControllerContext.Provider value={{\n      activeWorkspace,\n      closeAdminPanel,\n      displayWorkspace,\n      pinnedMessageListOpen,\n      closePinnedMessageListOpen,\n      togglePinnedMessageListOpen,\n    }}>\n      {children}\n    </WorkspaceControllerContext.Provider>\n  );\n};\n\nexport const useWorkspaceController = () => useContext(WorkspaceControllerContext);","import {\n  ChangeEventHandler,\n  createContext,\n  MouseEventHandler,\n  PropsWithChildren,\n  useCallback,\n  useContext,\n  useEffect,\n  useState,\n} from 'react';\nimport { Workspace } from '../../../context/WorkspaceController';\nimport { useChatContext } from 'stream-chat-react';\nimport { StreamChatType } from '../../../types';\n\ntype UpsertChannelParams = { name: string, members: string[] };\n\ntype ChannelType = 'team' | 'messaging';\n\ntype UpsertAction = 'create' | 'update';\n\nexport type FormValues = {\n  name: string;\n  members: string[];\n};\n\nexport type FormErrors = {\n  name: string | null;\n  members: string | null;\n};\n\ntype AdminPanelFormContext = FormValues & {\n  handleInputChange: ChangeEventHandler<HTMLInputElement>;\n  handleMemberSelect: ChangeEventHandler<HTMLInputElement>;\n  handleSubmit: MouseEventHandler<HTMLButtonElement>;\n  createChannelType?: ChannelType;\n  errors: FormErrors;\n};\n\n\nconst Context = createContext<AdminPanelFormContext>({\n  handleInputChange: () => null,\n  handleMemberSelect: () => null,\n  handleSubmit: () => null,\n  members: [],\n  name: '',\n  errors: { name: null, members: null },\n});\n\n\ntype AdminPanelFormProps = {\n  workspace: Workspace;\n  onSubmit: () => void;\n  defaultValues: FormValues;\n}\n\nconst getChannelTypeFromWorkspaceName = (workspace: Workspace): ChannelType | undefined => (\n  workspace.match(/.*__(team|messaging)/)?.[1] as ChannelType | undefined\n);\n\nconst getUpsertAction = (workspace: Workspace): UpsertAction | undefined => {\n  if (workspace.match('Channel-Create')) return 'create';\n  if (workspace.match('Channel-Edit')) return 'update';\n};\n\nexport const AdminPanelForm = ({ children, defaultValues, workspace, onSubmit }: PropsWithChildren<AdminPanelFormProps>) => {\n  const { client, channel, setActiveChannel } = useChatContext<StreamChatType>();\n  const [name, setChannelName] = useState<string>(defaultValues.name);\n  const [members, setMembers] = useState<string[]>(defaultValues.members);\n  const [errors, setErrors] = useState<FormErrors>({ name: null, members: null });\n\n  const createChannelType = getChannelTypeFromWorkspaceName(workspace);\n  const action = getUpsertAction(workspace);\n\n  const createChannel = useCallback(async ({ name, members }: UpsertChannelParams) => {\n    if (!createChannelType || members.length === 0) return;\n\n    const newChannel = await client.channel(createChannelType, name, {\n      name,\n      members,\n      demo: 'team',\n    });\n\n    await newChannel.watch();\n\n    setActiveChannel(newChannel);\n  }, [createChannelType, setActiveChannel, client]);\n\n  const updateChannel = useCallback(async ({ name, members }: UpsertChannelParams) => {\n    if (name !== (channel?.data?.name || channel?.data?.id)) {\n      await channel?.update(\n        { name },\n        { text: `Channel name changed to ${name}` },\n      );\n    }\n\n    if (members?.length) {\n      await channel?.addMembers(members);\n    }\n  }, [channel]);\n\n  const validateForm = useCallback(({action, createChannelType, values}:{values: FormValues, createChannelType?: ChannelType, action?: UpsertAction}): FormErrors | null => {\n    let errors:FormErrors = { name: null, members: null };\n\n    if (action === 'create') {\n      errors = {\n        name: !values.name && createChannelType === 'team' ? 'Channel name is required' : null,\n        members: values.members.length < 2  ? 'At least one additional member is required' : null,\n      };\n    }\n\n    if (action === 'update' && values.name === defaultValues.name && values.members.length === 0) {\n      errors = {\n        name: 'Name not changed (change name or add members)',\n        members: 'No new members added (change name or add members)',\n      };\n    }\n\n    return Object.values(errors).some(v => !!v) ?  errors : null;\n  }, [defaultValues.name]);\n\n  const handleSubmit: MouseEventHandler<HTMLButtonElement> = useCallback(async (event) => {\n    event.preventDefault();\n    const errors = validateForm({values: {name, members}, action, createChannelType});\n\n    if (errors) {\n      setErrors(errors);\n      return;\n    }\n\n    try {\n      if (action === 'create') await createChannel({ name, members });\n      if (action === 'update') await updateChannel({ name, members });\n      onSubmit();\n    } catch (err) {\n      console.error(err);\n    }\n  }, [action, createChannelType, name, members, createChannel, updateChannel, onSubmit, validateForm]);\n\n  const handleInputChange: ChangeEventHandler<HTMLInputElement> = useCallback((event) => {\n    event.preventDefault();\n    setChannelName(event.target.value);\n  }, []);\n\n  const handleMemberSelect: ChangeEventHandler<HTMLInputElement> = useCallback((event) => {\n    setMembers((prevMembers) => {\n      const { value } = event.target;\n      if (event.target.checked) {\n        return prevMembers.length ? [...prevMembers, value] : [value];\n      }\n      return prevMembers?.filter((prevUser) => prevUser !== value);\n    });\n  }, []);\n\n  useEffect(() => {\n    setChannelName(defaultValues.name);\n    setMembers(defaultValues.members)\n  }, [defaultValues, createChannelType]);\n\n  return (\n    <Context.Provider value={{\n      createChannelType,\n      errors,\n      name,\n      members,\n      handleInputChange,\n      handleMemberSelect,\n      handleSubmit,\n    }}>\n      {children}\n    </Context.Provider>\n  );\n};\n\nexport const useAdminPanelFormState = () => useContext(Context);","type CloseAdminPanelButtonProps = {\n  onClick: () => void;\n};\n\nexport const CloseAdminPanelButton = ( {onClick} : CloseAdminPanelButtonProps) => {\n\n  return (\n    <button>\n    <svg\n      width='32'\n      height='32'\n      viewBox='0 0 32 32'\n      fill='none'\n      xmlns='http://www.w3.org/2000/svg'\n      onClick={onClick}\n    >\n      <path\n        d='M6.10042 6.10051C0.633603 11.5673 0.633603 20.4327 6.10042 25.8995C11.5672 31.3663 20.4326 31.3663 25.8994 25.8995C31.3662 20.4327 31.3662 11.5673 25.8994 6.10051C20.4326 0.633686 11.5672 0.633685 6.10042 6.10051ZM22.3639 11.0503L17.4141 16L22.3639 20.9497L20.9497 22.364L15.9999 17.4142L11.0502 22.364L9.63596 20.9497L14.5857 16L9.63596 11.0503L11.0502 9.63604L15.9999 14.5858L20.9497 9.63604L22.3639 11.0503Z'\n        fill='var(--primary-color)'\n      />\n    </svg>\n    </button>\n  );\n};\n","import { CloseAdminPanelButton } from './CloseAdminPanelButton';\n\ntype AdminPanelHeaderProps = {\n  onClose: () => void;\n  title: string;\n}\n\nexport const AdminPanelHeader = ({onClose, title}: AdminPanelHeaderProps) => (\n  <div className='admin-panel__form-header'>\n    <div className='workspace-header__title workspace-header__block'>{title}</div>\n    <CloseAdminPanelButton onClick={onClose} />\n  </div>\n)","import { MouseEventHandler } from 'react';\n\ntype AdminPanelFooterProps = {\n  buttonText: string;\n  onButtonClick: MouseEventHandler<HTMLButtonElement>;\n}\n\nexport const AdminPanelFooter = ({buttonText, onButtonClick}: AdminPanelFooterProps) => (\n  <div className='admin-panel__form-footer' >\n    <button onClick={onButtonClick}>{buttonText}</button>\n  </div>\n)","export const ValidationError = ({errorMessage = ''}: {errorMessage: string | null}) => (\n  <div className='admin-panel__form-validation-error'>{errorMessage}</div>\n)","import { ChangeEventHandler } from 'react';\nimport { ValidationError } from './ValidationError';\n\ntype ChannelNameInputProps = {\n  name: string;\n  error: string | null;\n  onChange: ChangeEventHandler<HTMLInputElement>;\n  placeholder?: string;\n};\n\nexport const ChannelNameInputField = ({ name = '', error, placeholder = 'channel-name', onChange }: ChannelNameInputProps) => {\n\n  return (\n    <div className='channel-name-input-field'>\n      <h2><span>Name</span><ValidationError errorMessage={error} /></h2>\n      <input onChange={onChange} placeholder={placeholder} type='text' value={name} />\n    </div>\n  );\n};","import { useEffect, useMemo, useState } from 'react';\nimport { Avatar, useChatContext } from 'stream-chat-react';\n\nimport type { UserResponse } from 'stream-chat';\n\nimport type { StreamChatType } from '../../types';\nimport { useAdminPanelFormState } from './context/AdminPanelFormContext';\nimport { ValidationError } from './ValidationError';\n\nconst ListContainer = (props: { children: React.ReactNode }) => {\n  const { children } = props;\n  const {errors, createChannelType} = useAdminPanelFormState()\n  const showHeading = !createChannelType || createChannelType === 'team';\n  return (\n    <div className='user-list__container'>\n      {showHeading && <h2><span>Add Members</span><ValidationError errorMessage={errors.members} /></h2>}\n      <div className='user-list__header user-list__row'>\n        <div className='user-list__column-block'>\n          <p>User</p>\n          <p className='user-list__column--last-active'>Last Active</p>\n        </div>\n        <div className='user-list__column--checkbox'>\n          <p>Invite</p>\n        </div>\n      </div>\n      {children}\n    </div>\n  );\n};\n\ntype UserItemProps = {\n  index: number;\n  user: UserResponse<StreamChatType>;\n};\n\nconst MOCKED_LAST_ACTIVE_STRINGS = [\n  '12 min ago',\n  '27 min ago',\n  '6 hours ago',\n  '14 hours ago',\n];\n\nconst UserItem = ({ index, user }: UserItemProps) => {\n  const { handleMemberSelect } = useAdminPanelFormState();\n\n  const lastActive = MOCKED_LAST_ACTIVE_STRINGS[index] || 'Yesterday';\n  const title = user.name || user.id;\n\n  return (\n    <label htmlFor={user.id} title={title} className='user-list__row'>\n      <div className='user-list__column-block'>\n        <div className='user-list__column--user-data'>\n          <Avatar image={user.image} name={title} size={32} />\n          <p className='user-item__name'>{title}</p>\n        </div>\n        <p className='user-list__column--last-active'>{lastActive}</p>\n      </div>\n      <div className='user-list__column--checkbox'>\n        <input type='checkbox' name='members' id={user.id} value={user.id} onChange={handleMemberSelect} />\n      </div>\n    </label>\n  );\n};\n\n\ntype UserListLoadState = 'loading' | 'error' | 'empty';\n\nconst LOAD_STATE_NOTIFICATION: Record<UserListLoadState, string> = {\n  empty: 'No users found.',\n  error: 'Error loading, please refresh and try again.',\n  loading: 'Loading users...',\n};\n\n\nexport const UserList = () => {\n  const { client, channel } = useChatContext<StreamChatType>();\n  const { createChannelType } = useAdminPanelFormState();\n  const [loadState, setLoadState] = useState<UserListLoadState | null>(null);\n  const [users, setUsers] = useState<UserResponse<StreamChatType>[] | undefined>();\n\n  const channelMembers = useMemo(() => channel?.state.members\n      ? Object.keys(channel.state.members)\n      : [],\n    [channel?.state?.members],\n  );\n\n  useEffect(() => {\n    const getUsers = async () => {\n      if (loadState) return;\n      setLoadState('loading');\n\n      try {\n        const response = await client.queryUsers(\n          { id: { $nin: channelMembers } },\n          { id: 1 },\n          { limit: 8 },\n        );\n\n        if (response.users.length) {\n          setUsers(response.users);\n        } else {\n          setLoadState('empty');\n        }\n      } catch (event) {\n        setLoadState('error');\n      }\n\n      setLoadState(null);\n    };\n\n    if (client) getUsers();\n  }, [client, channelMembers, createChannelType]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <ListContainer>\n      {loadState\n        ? <div className='user-list__message'>{LOAD_STATE_NOTIFICATION[loadState]}</div>\n        : users?.length && users.map((user, i) => <UserItem index={i} key={user.id} user={user} />)}\n    </ListContainer>\n  );\n};\n","import { AdminPanelHeader } from './AdminPanelHeader';\nimport { AdminPanelFooter } from './AdminPanelFooter';\nimport { ChannelNameInputField } from './ChannelNameInputField';\nimport { UserList } from './UserList';\n\nimport { useAdminPanelFormState } from './context/AdminPanelFormContext';\nimport { useWorkspaceController } from '../../context/WorkspaceController';\n\nexport const CreateChannel = () => {\n  const { closeAdminPanel } = useWorkspaceController();\n  const {createChannelType, name, handleInputChange, handleSubmit, errors} = useAdminPanelFormState();\n\n\n  return (\n    <div className='admin-panel__form'>\n      <AdminPanelHeader onClose={closeAdminPanel}\n                        title={createChannelType === 'team'\n                          ? 'Create a New Channel'\n                          : 'Send a Direct Message'}\n      />\n      {createChannelType === 'team' &&\n        <ChannelNameInputField\n          error={errors.name}\n          name={name}\n          onChange={handleInputChange}\n          placeholder='channel-name (no spaces)' />\n      }\n      <UserList/>\n      <AdminPanelFooter\n        onButtonClick={handleSubmit}\n        buttonText={createChannelType === 'team'\n          ? 'Create Channel'\n          : 'Create Message Group'}\n      />\n    </div>\n  );\n};\n","import { AdminPanelHeader } from './AdminPanelHeader';\nimport { AdminPanelFooter } from './AdminPanelFooter';\nimport { ChannelNameInputField } from './ChannelNameInputField';\nimport { UserList } from './UserList';\n\nimport { useWorkspaceController } from '../../context/WorkspaceController';\nimport { useAdminPanelFormState } from './context/AdminPanelFormContext';\n\nexport const EditChannel = () => {\n  const { closeAdminPanel } = useWorkspaceController();\n  const {name, handleInputChange, handleSubmit, errors} = useAdminPanelFormState()\n\n  return (\n    <div className='admin-panel__form'>\n      <AdminPanelHeader onClose={closeAdminPanel} title='Edit Channel'/>\n      <ChannelNameInputField name={name} error={errors.name} onChange={handleInputChange} />\n      <UserList />\n      <AdminPanelFooter buttonText='Save Changes' onButtonClick={handleSubmit}/>\n    </div>\n  );\n};\n","import { useCallback } from 'react';\nimport { useWorkspaceController } from '../../context/WorkspaceController';\nimport { AdminPanelForm, FormValues } from './context/AdminPanelFormContext';\nimport { CreateChannel } from './CreateChannel';\nimport { EditChannel } from './EditChannel';\nimport { useChatContext } from 'stream-chat-react';\nimport { StreamChatType } from '../../types';\n\nexport const AdminPanel = () => {\n  const { client, channel } = useChatContext<StreamChatType>();\n  const { displayWorkspace, activeWorkspace } = useWorkspaceController();\n  const onSubmit = useCallback(() => displayWorkspace('Chat'), [displayWorkspace]);\n\n  let defaultFormValues: FormValues = {name: '', members: []};\n  let Form = null;\n\n  if (activeWorkspace.match('Channel-Create')) {\n    defaultFormValues = { members: client.userID ? [client.userID] : [], name: '', };\n    Form = CreateChannel;\n  } else if (activeWorkspace.match('Channel-Edit')) {\n    defaultFormValues= { members: [], name: channel?.data?.name || (channel?.data?.id as string), };\n    Form = EditChannel;\n  }\n  return (\n    <AdminPanelForm workspace={activeWorkspace} onSubmit={onSubmit} defaultValues={defaultFormValues}>\n      <div className='channel__container'>\n        { Form && <Form />}\n      </div>\n    </AdminPanelForm>\n  );\n};","import { MouseEventHandler } from 'react';\n\ntype Props = {\n  onClick?: MouseEventHandler;\n};\n\nexport const CloseThreadButton = (props: Props) => {\n  const { onClick } = props;\n\n  return (\n    <button\n      onClick={onClick}\n      className='close-thread-icon'\n    >\n      <svg\n        xmlns='http://www.w3.org/2000/svg'\n        width='40'\n        height='40'\n        fill='none'\n        viewBox='0 0 40 40'\n      >\n        <path\n          fill='var(--primary-color)'\n          fillRule='evenodd'\n          d='M27.563 25.442L22.12 20l5.442-5.442a1.496 1.496 0 000-2.12 1.496 1.496 0 00-2.121 0L20 17.878l-5.441-5.442a1.496 1.496 0 00-2.121 0 1.496 1.496 0 000 2.121L17.879 20l-5.441 5.442a1.496 1.496 0 000 2.12 1.496 1.496 0 002.12 0L20 22.122l5.442 5.442a1.496 1.496 0 002.12 0 1.504 1.504 0 000-2.121z'\n          clipRule='evenodd'\n        ></path>\n        <rect width='39' height='39' x='0.5' y='0.5' stroke='#E9E9EA' rx='19.5'></rect>\n      </svg>\n    </button>\n  );\n};\n","import { StreamMessage } from 'stream-chat-react';\n\nimport { PinIcon } from '../../assets';\n\nimport { StreamChatType } from '../../types';\n\nexport type PinIndicatorProps = {\n  message?: StreamMessage<StreamChatType>;\n};\n\nexport const PinIndicator = ({ message }: PinIndicatorProps) => {\n  if (!message) return null;\n\n  return (\n    <div className='str-chat__message-team-pin-indicator'>\n        <PinIcon />\n          {message.pinned_by\n            ? `Pinned by ${message.pinned_by?.name || message.pinned_by?.id}`\n            : 'Message pinned'}\n    </div>\n  );\n};\n","import clsx from 'clsx';\nimport React, { useMemo, useRef } from 'react';\nimport type { TranslationLanguages } from 'stream-chat';\nimport {\n  areMessageUIPropsEqual,\n  Avatar,\n  EditMessageForm,\n  ErrorIcon,\n  isOnlyEmojis,\n  MESSAGE_ACTIONS,\n  MessageActions,\n  MessageContextValue,\n  MessageDeleted,\n  MessageInput,\n  MessageRepliesCountButton,\n  MessageStatus,\n  MessageTimestamp,\n  MessageUIComponentProps,\n  // QuotedMessage,\n  ReactEventHandler,\n  ReactionIcon,\n  ReactionSelector,\n  renderText as defaultRenderText,\n  showMessageActionsBox,\n  SimpleReactionsList,\n  ThreadIcon,\n  useComponentContext,\n  useMessageContext,\n  useReactionClick,\n  useTranslationContext,\n} from 'stream-chat-react';\n\nimport { PinIndicator } from './PinIndicator';\n\nimport { useWorkspaceController } from '../../context/WorkspaceController';\n\nimport type { StreamChatType } from '../../types';\n\n\ntype MessageTeamWithContextProps = MessageContextValue<StreamChatType> & {\n  isReactionEnabled: boolean;\n  messageWrapperRef: React.MutableRefObject<HTMLDivElement | null>;\n  onReactionListClick: ReactEventHandler;\n  reactionSelectorRef: React.MutableRefObject<HTMLDivElement | null>;\n  showDetailedReactions: boolean;\n};\n\nconst MessageTeamWithContext = (\n  props: MessageTeamWithContextProps,\n) => {\n  const {\n    clearEditingState,\n    editing,\n    getMessageActions,\n    groupStyles,\n    handleAction,\n    handleOpenThread,\n    handleRetry,\n    initialMessage,\n    isReactionEnabled,\n    message,\n    messageWrapperRef,\n    onMentionsClickMessage,\n    onMentionsHoverMessage,\n    onReactionListClick,\n    onUserClick,\n    onUserHover,\n    reactionSelectorRef,\n    renderText = defaultRenderText,\n    showDetailedReactions,\n    threadList,\n  } = props;\n\n  const { Attachment } = useComponentContext<StreamChatType>('MessageTeam');\n\n  const { t, userLanguage } = useTranslationContext('MessageTeam');\n\n  const messageActions = getMessageActions();\n  const showActionsBox = showMessageActionsBox(messageActions);\n\n  const shouldShowReplies = messageActions.indexOf(MESSAGE_ACTIONS.reply) > -1 && !threadList;\n\n  const messageTextToRender =\n    message.i18n?.[`${userLanguage}_text` as `${TranslationLanguages}_text`] || message.text;\n\n  const messageMentionedUsersItem = message.mentioned_users;\n\n  const messageText = useMemo(() => renderText(messageTextToRender, messageMentionedUsersItem), [\n    messageMentionedUsersItem,\n    messageTextToRender,\n    renderText,\n  ]);\n\n  const firstGroupStyle = groupStyles ? groupStyles[0] : 'single';\n\n  if (message.deleted_at) {\n    return <MessageDeleted message={message} />;\n  }\n\n  if (editing) {\n    return (\n      <div\n        className={`str-chat__message-team str-chat__message-team--${firstGroupStyle} str-chat__message-team--editing`}\n        data-testid='message-team-edit'\n      >\n        {(firstGroupStyle === 'top' || firstGroupStyle === 'single') && (\n          <div className='str-chat__message-team-meta'>\n            <Avatar\n              image={message.user?.image}\n              name={message.user?.name || message.user?.id}\n              onClick={onUserClick}\n              onMouseOver={onUserHover}\n              size={34}\n            />\n          </div>\n        )}\n        <MessageInput\n          clearEditingState={clearEditingState}\n          Input={EditMessageForm}\n          message={message}\n        />\n      </div>\n    );\n  }\n  const rootClass = clsx(\n    'str-chat__message',\n    'str-chat__message-team',\n    `str-chat__message-team--${firstGroupStyle}`,\n    {\n      'pinned-message': message.pinned,\n      [`str-chat__message-team--${message.status}`]: message.status,\n      [`str-chat__message-team--${message.type}`]: message.type,\n      'str-chat__message--has-attachment': !!message.attachments?.length,\n      'threadList': threadList,\n    },\n  );\n\n  return (\n    <>\n      {message.pinned && <PinIndicator message={message} />}\n      <div\n        className={rootClass}\n        data-testid='message-team'\n        ref={messageWrapperRef}\n      >\n        <div className='avatar-host'>\n          {firstGroupStyle === 'top' || firstGroupStyle === 'single' || initialMessage ? (\n            <Avatar\n              image={message.user?.image}\n              name={message.user?.name || message.user?.id}\n              onClick={onUserClick}\n              onMouseOver={onUserHover}\n              size={34}\n            />\n          ) : (\n            <div data-testid='team-meta-spacer' style={{ marginRight: 0, width: 34 }} />\n          )}\n        </div>\n        <div className='str-chat__message-team-group'>\n          {(firstGroupStyle === 'top' || firstGroupStyle === 'single' || initialMessage) && (\n            <div className='str-chat__message-team-meta'>\n              <div\n                className='str-chat__message-team-author'\n                data-testid='message-team-author'\n                onClick={onUserClick}\n              >\n                <strong>{message.user?.name || message.user?.id}</strong>\n                {message.type === 'error' && (\n                  <div className='str-chat__message-team-error-header'>\n                    {t<string>('Only visible to you')}\n                  </div>\n                )}\n              </div>\n              <MessageTimestamp />\n            </div>\n          )}\n          <div\n            className={`str-chat__message-team-content str-chat__message-team-content--${firstGroupStyle} str-chat__message-team-content--${\n              message.text === '' ? 'image' : 'text'\n            }`}\n            data-testid='message-team-content'\n          >\n            {/*{message.quoted_message && <QuotedMessage />}*/}\n            {!initialMessage &&\n              message.status !== 'sending' &&\n              message.status !== 'failed' &&\n              message.type !== 'system' &&\n              message.type !== 'ephemeral' &&\n              message.type !== 'error' && (\n                <div\n                  className={`str-chat__message-team-actions`}\n                  data-testid='message-team-actions'\n                >\n                  {showDetailedReactions && <ReactionSelector ref={reactionSelectorRef} />}\n                  {isReactionEnabled && (\n                    <span\n                      data-testid='message-team-reaction-icon'\n                      onClick={onReactionListClick}\n                      title='Reactions'\n                    >\n                      <ReactionIcon />\n                    </span>\n                  )}\n                  {shouldShowReplies && (\n                    <span\n                      data-testid='message-team-thread-icon'\n                      onClick={handleOpenThread}\n                      title='Start a thread'\n                    >\n                      <ThreadIcon />\n                    </span>\n                  )}\n                  {showActionsBox && (\n                    <MessageActions inline messageWrapperRef={messageWrapperRef} />\n                  )}\n                </div>\n              )}\n            {message.text && (<div\n                className={clsx('str-chat__message-team-text', {'str-chat__message-team-text--is-emoji': isOnlyEmojis(message.text)})}\n                data-testid='message-team-message'\n                onClick={onMentionsClickMessage}\n                onMouseOver={onMentionsHoverMessage}\n              >\n                {messageText}\n              </div>\n            )}\n            {!message.text && message.attachments?.length ? (\n              <Attachment actionHandler={handleAction} attachments={message.attachments} />\n            ) : null}\n            {message.latest_reactions?.length !== 0 && message.text !== '' && isReactionEnabled && (\n              <SimpleReactionsList />\n            )}\n            {message.status === 'failed' && (\n              <button\n                className='str-chat__message-team-failed'\n                data-testid='message-team-failed'\n                onClick={message.errorStatusCode !== 403 ? () => handleRetry(message) : undefined}\n              >\n                <ErrorIcon />\n                {message.errorStatusCode !== 403\n                  ? t<string>('Message Failed · Click to try again')\n                  : t<string>('Message Failed · Unauthorized')}\n              </button>\n            )}\n          </div>\n          <MessageStatus messageType='team' />\n          {message.text && message.attachments?.length ? (\n            <Attachment actionHandler={handleAction} attachments={message.attachments} />\n          ) : null}\n          {message.latest_reactions &&\n            message.latest_reactions.length !== 0 &&\n            message.text === '' &&\n            isReactionEnabled && <SimpleReactionsList />}\n          {!threadList && (\n            <MessageRepliesCountButton\n              onClick={handleOpenThread}\n              reply_count={message.reply_count}\n            />\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst MemoizedMessageTeam = React.memo(\n  MessageTeamWithContext,\n  areMessageUIPropsEqual,\n) as typeof MessageTeamWithContext;\n\n\nexport const TeamMessage = (\n  props: MessageUIComponentProps<StreamChatType>,\n) => {\n  const messageContext = useMessageContext<StreamChatType>('MessageTeam');\n  const { closePinnedMessageListOpen } = useWorkspaceController();\n\n  const reactionSelectorRef = useRef<HTMLDivElement | null>(null);\n  const messageWrapperRef = useRef<HTMLDivElement | null>(null);\n\n  const message = props.message || messageContext.message;\n\n  const { isReactionEnabled, onReactionListClick, showDetailedReactions } = useReactionClick(\n    message,\n    reactionSelectorRef,\n    messageWrapperRef,\n  );\n\n  const handleOpenThreadOverride = (event: React.BaseSyntheticEvent) => {\n    closePinnedMessageListOpen();\n    messageContext.handleOpenThread(event);\n  };\n\n  return (\n    <div className={message.pinned ? 'pinned-message' : 'unpinned-message'}>\n    <MemoizedMessageTeam\n      {...messageContext}\n      isReactionEnabled={isReactionEnabled}\n      messageWrapperRef={messageWrapperRef}\n      onReactionListClick={onReactionListClick}\n      reactionSelectorRef={reactionSelectorRef}\n      showDetailedReactions={showDetailedReactions}\n      handleOpenThread={handleOpenThreadOverride}\n      {...props}\n    />\n    </div>\n  );\n};\n","import { Message, useChannelStateContext } from 'stream-chat-react';\n\nimport { CloseThreadButton } from '../TeamChannelHeader/CloseThreadButton';\nimport type { StreamChatType } from '../../types';\nimport { TeamMessage } from '../TeamMessage/TeamMessage';\n\nimport { useWorkspaceController } from '../../context/WorkspaceController';\n\nexport const PinnedMessageList = () => {\n  const { pinnedMessageListOpen, togglePinnedMessageListOpen } = useWorkspaceController();\n  const { channel } = useChannelStateContext<StreamChatType>();\n\n  if (!pinnedMessageListOpen) return null;\n\n  return (\n    <div className='pinned-messages__container'>\n      <div className='pinned-messages__header'>\n        <div className='workspace-header__title'>Pins</div>\n        <CloseThreadButton onClick={togglePinnedMessageListOpen} />\n      </div>\n      <div className='pinned-messages__list'>\n        {channel.state.pinnedMessages.map((message) => (\n          <Message\n            groupStyles={['single']}\n            Message={TeamMessage}\n            key={message.id}\n            message={message}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n","export const ChannelInfoIcon = () => (\n  <svg width='18' height='18' viewBox='0 0 18 18' fill='none' xmlns='http://www.w3.org/2000/svg'>\n    <path\n      d='M8.16602 6.49837H9.83269V4.83171H8.16602V6.49837ZM8.99936 15.665C5.32351 15.665 2.33268 12.6743 2.33268 8.99833C2.33268 5.32253 5.32351 2.33171 8.99936 2.33171C12.6752 2.33171 15.666 5.32253 15.666 8.99833C15.666 12.6743 12.6752 15.665 8.99936 15.665ZM8.99936 0.665039C4.39684 0.665039 0.666016 4.39587 0.666016 8.99833C0.666016 13.6009 4.39684 17.3317 8.99936 17.3317C13.6019 17.3317 17.3327 13.6009 17.3327 8.99833C17.3327 4.39587 13.6019 0.665039 8.99936 0.665039ZM8.16602 13.165H9.83269V8.165H8.16602V13.165Z'\n      fill='black'\n      fillOpacity='0.33'\n    />\n  </svg>\n);\n","import { MouseEventHandler, useCallback } from 'react';\nimport { Avatar, useChannelActionContext, useChannelStateContext, useChatContext } from 'stream-chat-react';\n\nimport { PinIcon } from '../../assets';\n\nimport { ChannelInfoIcon } from './ChannelInfoIcon';\nimport { useWorkspaceController } from '../../context/WorkspaceController';\n\nimport type { StreamChatType } from '../../types';\n\nexport const TeamChannelHeader = () => {\n  const { displayWorkspace } = useWorkspaceController();\n  const { client } = useChatContext<StreamChatType>();\n  const { channel, watcher_count } = useChannelStateContext<StreamChatType>();\n  const { closeThread } = useChannelActionContext<StreamChatType>();\n  const { togglePinnedMessageListOpen } = useWorkspaceController();\n\n  const teamHeader = `# ${channel?.data?.name || channel?.data?.id || 'random'}`;\n\n  const openChannelEditPanel = useCallback(() => {\n    displayWorkspace('Admin-Channel-Edit');\n  }, [displayWorkspace]);\n\n  const onPinIconClick: MouseEventHandler = useCallback((event) => {\n    closeThread?.(event);\n    togglePinnedMessageListOpen();\n  }, [closeThread, togglePinnedMessageListOpen])\n\n  const getMessagingHeader = () => {\n    const members = Object.values(channel.state.members).filter(\n      ({ user }) => user?.id !== client.userID,\n    );\n    const additionalMembers = members.length - 3;\n\n    if (!members.length) {\n      return (\n        <div className='workspace-header__block'>\n          <Avatar image={null} size={32} />\n          <p className='team-channel-header__name user'>Johnny Blaze</p>\n        </div>\n      );\n    }\n\n    return (\n      <div className='workspace-header__block'>\n        {members.map(({ user }, i) => {\n          if (i > 2) return null;\n          return (\n            <div key={i} className='workspace-header__block-item'>\n              <Avatar image={user?.image} name={user?.name || user?.id} size={32} />\n              <p className='team-channel-header__name user'>\n                {user?.name || user?.id || 'Johnny Blaze'}\n              </p>\n            </div>\n          );\n        })}\n        {additionalMembers > 0 && (\n          <p className='team-channel-header__name user'>{`and ${additionalMembers} more`}</p>\n        )}\n      </div>\n    );\n  };\n\n  const getWatcherText = (watchers?: number) => {\n    if (!watchers) return 'No users online';\n    if (watchers === 1) return '1 user online';\n    return `${watchers} users online`;\n  };\n\n  return (\n    <div className='team-channel-header__container'>\n      {channel.type === 'messaging' ? (\n        getMessagingHeader()\n      ) : (\n        <div className='workspace-header__block'>\n          <div className='team-channel-header__name workspace-header__title'>{teamHeader}</div>\n          <button onClick={openChannelEditPanel}>\n            <ChannelInfoIcon />\n          </button>\n        </div>\n      )}\n      <div className='workspace-header__block'>\n        <div className='workspace-header__subtitle'>{getWatcherText(watcher_count)}</div>\n        <button\n          className='workspace-header__subtitle'\n          onClick={onPinIconClick}\n        >\n          <PinIcon />\n          Pins\n        </button>\n      </div>\n    </div>\n  );\n};\n","export const LightningBoltIcon = () => (\n  <svg width='6' height='12' viewBox='0 0 6 12' fill='none' xmlns='http://www.w3.org/2000/svg'>\n    <path\n      d='M2.75774 0.666748H5.66683L3.72744 4.54554H5.66683L2.03047 11.3334L2.75774 6.48493H0.333496L2.75774 0.666748Z'\n      fill='white'\n    />\n  </svg>\n);\n","import { LightningBoltIcon } from './LightningBoltIcon';\n\nexport const GiphyBadge = () => (\n  <div className='giphy-icon__wrapper'>\n    <LightningBoltIcon />\n    <p className='giphy-icon__text'>GIPHY</p>\n  </div>\n);","import React, { forwardRef, MouseEventHandler } from 'react';\nimport clsx from 'clsx';\nimport { MessageInputControlType } from './hooks/useMessageInputCompositionControls';\n\ntype MessageInputControlButtonProps = {\n  onClick: MouseEventHandler<HTMLButtonElement>;\n  type: MessageInputControlType;\n  active?: boolean;\n};\n\nconst EmojiIcon = () => (\n  <svg\n    xmlns='http://www.w3.org/2000/svg'\n    width='16'\n    height='16'\n    fill='none'\n    viewBox='0 0 16 16'\n  >\n    <path\n      fillRule='evenodd'\n      d='M1.6 8a6.4 6.4 0 1112.8 0A6.4 6.4 0 011.6 8zM8 0a8 8 0 100 16A8 8 0 008 0zM6 7.2a1.2 1.2 0 100-2.4 1.2 1.2 0 000 2.4zM11.2 6a1.2 1.2 0 11-2.4 0 1.2 1.2 0 012.4 0zM5.455 9.141a.8.8 0 10-1.31.918c.542.774 1.578 1.737 2.962 2.024 1.46.303 3.1-.184 4.688-1.948a.8.8 0 00-1.19-1.07C9.313 10.5 8.22 10.68 7.433 10.517c-.863-.18-1.586-.817-1.978-1.376z'\n      clipRule='evenodd'\n    ></path>\n  </svg>\n);\n\nconst BoldIcon = () => (\n  <svg\n    width='10'\n    height='12'\n    viewBox='0 0 10 12'\n    fill='none'\n    xmlns='http://www.w3.org/2000/svg'\n  >\n    <path\n      d='M7.63 5.82C8.46 5.24 9 4.38 9 3.5C9 1.57 7.43 0 5.5 0H0V12H6.25C8.04 12 9.5 10.54 9.5 8.75C9.5 7.45 8.73 6.34 7.63 5.82ZM2.5 2H5.25C6.08 2 6.75 2.67 6.75 3.5C6.75 4.33 6.08 5 5.25 5H2.5V2ZM5.75 10H2.5V7H5.75C6.58 7 7.25 7.67 7.25 8.5C7.25 9.33 6.58 10 5.75 10Z'\n    />\n  </svg>\n);\n\nconst CodeSnippetIcon = () => (\n  <svg\n    width='20'\n    height='12'\n    viewBox='0 0 20 12'\n    fill='none'\n    xmlns='http://www.w3.org/2000/svg'\n  >\n    <path\n      d='M7.4 10.6L2.8 6L7.4 1.4L6 0L0 6L6 12L7.4 10.6ZM12.6 10.6L17.2 6L12.6 1.4L14 0L20 6L14 12L12.6 10.6Z'\n    />\n  </svg>\n);\n\nconst ItalicsIcon = () => (\n  <svg\n    width='12'\n    height='12'\n    viewBox='0 0 12 12'\n    fill='none'\n    xmlns='http://www.w3.org/2000/svg'\n  >\n    <path\n      d='M4 0V2H6.58L2.92 10H0V12H8V10H5.42L9.08 2H12V0H4Z'\n    />\n  </svg>\n);\n\nconst StrikeThroughIcon = () => (\n  <svg\n    width='16'\n    height='14'\n    viewBox='0 0 16 14'\n    fill='none'\n    xmlns='http://www.w3.org/2000/svg'\n  >\n    <path\n      d='M3.76889 5.11111C3.53778 4.68444 3.42222 4.19556 3.42222 3.62667C3.42222 3.08444 3.53778 2.59556 3.77778 2.14222C4.00889 1.69778 4.33778 1.31556 4.76444 0.995555C5.19111 0.684444 5.69778 0.435556 6.27556 0.257778C6.86222 0.0888889 7.51111 0 8.21333 0C8.93333 0 9.58222 0.0977777 10.1778 0.302222C10.7644 0.497778 11.2711 0.782222 11.68 1.13778C12.0978 1.49333 12.4178 1.92 12.64 2.40889C12.8622 2.89778 12.9778 3.43111 12.9778 4.01778H10.3022C10.3022 3.74222 10.2578 3.49333 10.1689 3.26222C10.0889 3.02222 9.95556 2.82667 9.77778 2.65778C9.6 2.48889 9.37778 2.36444 9.11111 2.26667C8.84444 2.17778 8.52444 2.12444 8.16889 2.12444C7.82222 2.12444 7.51111 2.16 7.25333 2.24C6.99556 2.32 6.78222 2.42667 6.61333 2.56C6.44444 2.70222 6.31111 2.86222 6.22222 3.04889C6.13333 3.23556 6.08889 3.43111 6.08889 3.63556C6.08889 4.06222 6.31111 4.41778 6.74667 4.71111C7.08444 4.93333 7.43111 5.13778 8 5.33333H3.90222C3.85778 5.26222 3.80444 5.18222 3.76889 5.11111ZM16 8V6.22222H0V8H8.55111C8.71111 8.06222 8.90667 8.12444 9.04 8.17778C9.36889 8.32889 9.62667 8.48 9.81333 8.63111C10 8.78222 10.1244 8.95111 10.1956 9.13778C10.2578 9.31556 10.2933 9.52 10.2933 9.75111C10.2933 9.95556 10.2489 10.1511 10.1689 10.3378C10.0889 10.5156 9.96445 10.6756 9.79556 10.8089C9.62667 10.9422 9.42222 11.04 9.16444 11.12C8.90667 11.1911 8.60444 11.2356 8.26667 11.2356C7.88444 11.2356 7.52889 11.2 7.21778 11.12C6.90667 11.04 6.63111 10.9156 6.40889 10.7467C6.18667 10.5778 6.00889 10.3556 5.88444 10.08C5.76 9.80444 5.66222 9.40444 5.66222 9.00445H3.02222C3.02222 9.49333 3.09333 10.0089 3.23556 10.4089C3.37778 10.8089 3.56444 11.1644 3.81333 11.4844C4.06222 11.7956 4.34667 12.0711 4.68444 12.3022C5.01333 12.5333 5.37778 12.7289 5.76889 12.88C6.16 13.0311 6.56889 13.1467 6.99556 13.2267C7.42222 13.2978 7.84889 13.3422 8.27556 13.3422C8.98667 13.3422 9.63556 13.2622 10.2133 13.0933C10.7911 12.9244 11.2889 12.6933 11.6978 12.3911C12.1067 12.0889 12.4267 11.7067 12.6489 11.2622C12.8711 10.8178 12.9867 10.3111 12.9867 9.74222C12.9867 9.20889 12.8978 8.72889 12.7111 8.31111C12.6667 8.21333 12.6133 8.10667 12.56 8.01778H16V8Z'\n    />\n  </svg>\n);\n\nconst ControlsIcons: Record<MessageInputControlType, React.ComponentType> = {\n  bold: BoldIcon,\n  code: CodeSnippetIcon,\n  emoji: EmojiIcon,\n  italics: ItalicsIcon,\n  'strike-through': StrikeThroughIcon,\n};\n\n\nexport const MessageInputControlButton = forwardRef<HTMLButtonElement, MessageInputControlButtonProps>((\n  { active, onClick, type }, ref,\n) => {\n  const Icon = ControlsIcons[type];\n\n  if (!Icon) return null;\n\n  return (\n    <button className={clsx('message-input__controls-button', type, { 'active': active })} onClick={onClick} ref={ref}>\n      <Icon />\n    </button>\n  );\n});\n","export const SendButtonIcon = () => (\n  <svg width='14' height='12' viewBox='0 0 14 12' fill='none' xmlns='http://www.w3.org/2000/svg'>\n    <path\n      d='M0.5 12L13.5 6L0.5 0V4.66666L9.8125 6L0.5 7.33334V12Z'\n    />\n  </svg>\n);\n","import React, { useCallback, useContext, useState } from 'react';\n\ntype GiphyState = Record<'main-input' | 'thread-input', boolean>\n\ntype GiphyStateObj = {\n  clearGiphyFlag: (isReply: boolean) => void;\n  clearGiphyFlagMainInput: () => void;\n  clearGiphyFlagThread: () => void;\n  inputHasGiphyMessage: (isReply: boolean) => boolean;\n  isComposingGiphyMessage: () => boolean;\n  isComposingGiphyReply: () => boolean;\n  setComposeGiphyMessageFlag: () => void;\n  setComposeGiphyReplyFlag: () => void;\n};\nexport const GiphyInMessageFlagContext = React.createContext<GiphyStateObj>({} as GiphyStateObj);\n\nexport const GiphyInMessageFlagProvider = ({children}: {children: React.ReactNode}) => {\n  const [giphyState, setGiphyState] = useState<GiphyState>({\n    'main-input': false,\n    'thread-input': false,\n  });\n\n  const clearGiphyFlag = useCallback((isReply: boolean) => {\n    setGiphyState((prev) =>\n      isReply\n        ? {...prev, 'thread-input': false}\n        : {...prev, 'main-input': false}\n    );\n  }, []);\n\n  const clearGiphyFlagMainInput = useCallback(() => {\n    setGiphyState((prev) => ({...prev, 'main-input': false}));\n  }, []);\n\n  const clearGiphyFlagThread = useCallback(() => {\n    setGiphyState((prev) => ({...prev, 'thread-input': false}));\n  }, []);\n\n  const inputHasGiphyMessage = useCallback((isReply: boolean) => (\n    isReply ? giphyState['thread-input'] : giphyState['main-input']\n  ), [giphyState]);\n\n  const isComposingGiphyMessage = useCallback(() => giphyState['main-input'], [giphyState]);\n\n  const isComposingGiphyReply = useCallback(() => giphyState['thread-input'], [giphyState]);\n\n  const setComposeGiphyMessageFlag = useCallback(() => {\n    setGiphyState((prev) => ({...prev, 'main-input': true}));\n  }, []);\n\n  const setComposeGiphyReplyFlag = useCallback(() => {\n    setGiphyState((prev) => ({...prev, 'thread-input': true}));\n  }, []);\n\n  return (\n    <GiphyInMessageFlagContext.Provider value={{\n      clearGiphyFlag,\n      clearGiphyFlagMainInput,\n      clearGiphyFlagThread,\n      inputHasGiphyMessage,\n      isComposingGiphyMessage,\n      isComposingGiphyReply,\n      setComposeGiphyMessageFlag,\n      setComposeGiphyReplyFlag,\n    }}>\n      {children}\n    </GiphyInMessageFlagContext.Provider>\n  )\n};\n\nexport const useGiphyInMessageContext = () => useContext(GiphyInMessageFlagContext);\n","import { useCallback, useState } from 'react';\nimport { ChatAutoComplete, EmojiPicker, useMessageInputContext } from 'stream-chat-react';\nimport { usePopper } from 'react-popper';\n\nimport { GiphyBadge } from './GiphyBadge';\nimport { MessageInputControlButton } from './MessageInputControls';\nimport { SendButtonIcon } from './SendButtonIcon';\n\nimport { useGiphyInMessageContext } from '../../context/GiphyInMessageFlagContext';\n\nimport type { StreamChatType } from '../../types';\n\nexport const ThreadMessageInput = () => {\n  const { isComposingGiphyReply, clearGiphyFlagThread, setComposeGiphyReplyFlag } = useGiphyInMessageContext();\n\n  const messageInput = useMessageInputContext<StreamChatType>();\n  const {openEmojiPicker, closeEmojiPicker, emojiPickerIsOpen} = messageInput;\n  const [referenceElement, setReferenceElement] = useState<HTMLButtonElement | null>(null);\n  const [popperElement, setPopperElement] = useState<HTMLDivElement | null>(null);\n  const { styles, attributes } = usePopper(referenceElement, popperElement, {\n    placement: 'top-end',\n  });\n\n  const onChange: React.ChangeEventHandler<HTMLTextAreaElement> = useCallback(\n    (event) => {\n      const deletePressed =\n        event.nativeEvent instanceof InputEvent &&\n        event.nativeEvent.inputType === 'deleteContentBackward';\n\n      if (messageInput.text.length === 1 && deletePressed) {\n        clearGiphyFlagThread();\n      }\n\n      if (messageInput.text.startsWith('/giphy') && !isComposingGiphyReply()) {\n        console.log('replacing');\n        event.target.value = event.target.value.replace('/giphy', '');\n        setComposeGiphyReplyFlag();\n      }\n\n      messageInput.handleChange(event);\n    },\n    [clearGiphyFlagThread, messageInput, setComposeGiphyReplyFlag, isComposingGiphyReply],\n  );\n\n  return (\n    <div className='thread-message-input__wrapper'>\n      <div className='thread-message-input__input'>\n        {isComposingGiphyReply() && <GiphyBadge />}\n        <ChatAutoComplete\n          onChange={onChange}\n          placeholder='Reply'\n        />\n        <MessageInputControlButton type='emoji' onClick={emojiPickerIsOpen ? closeEmojiPicker : openEmojiPicker} ref={setReferenceElement} />\n        <button\n          className='thread-message-input__send-button'\n          disabled={!messageInput.numberOfUploads && !messageInput.text.length}\n          onClick={messageInput.handleSubmit}\n        >\n          <SendButtonIcon />\n        </button>\n      </div>\n      {emojiPickerIsOpen && (\n        <div\n          className='str-chat__message-textarea-emoji-picker-container'\n          style={styles.popper}\n          {...attributes.popper}\n          ref={setPopperElement}\n        >\n          <EmojiPicker />\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useCallback } from 'react';\nimport { logChatPromiseExecution, MessageResponse } from 'stream-chat';\nimport {\n  defaultPinPermissions,\n  MessageInput,\n  MessageList,\n  MessageToSend,\n  PinEnabledUserRoles,\n  Thread,\n  useChannelActionContext,\n  Window,\n} from 'stream-chat-react';\n\nimport { PinnedMessageList } from '../PinnedMessageList/PinnedMessageList';\nimport { TeamChannelHeader } from '../TeamChannelHeader/TeamChannelHeader';\nimport { ThreadMessageInput } from '../TeamMessageInput/ThreadMessageInput';\n\nimport { useGiphyInMessageContext } from '../../context/GiphyInMessageFlagContext';\n\nimport type { StreamChatType } from '../../types';\n\nexport const ChannelInner = () => {\n  const {inputHasGiphyMessage, clearGiphyFlag} = useGiphyInMessageContext();\n  const { sendMessage } = useChannelActionContext<StreamChatType>();\n\n  // todo: migrate to channel capabilities once migration guide is available\n  const teamPermissions: PinEnabledUserRoles = { ...defaultPinPermissions.team, user: true };\n  const messagingPermissions: PinEnabledUserRoles = {\n    ...defaultPinPermissions.messaging,\n    user: true,\n  };\n\n  const pinnedPermissions = {\n    ...defaultPinPermissions,\n    team: teamPermissions,\n    messaging: messagingPermissions,\n  };\n\n  const overrideSubmitHandler = useCallback((message: MessageToSend) => {\n    let updatedMessage = {\n      attachments: message.attachments,\n      mentioned_users: message.mentioned_users,\n      parent_id: message.parent?.id,\n      parent: message.parent as MessageResponse,\n      text: message.text,\n    };\n\n    const isReply = !!updatedMessage.parent_id;\n\n    if (inputHasGiphyMessage(isReply)) {\n      const updatedText = `/giphy ${message.text}`;\n      updatedMessage = { ...updatedMessage, text: updatedText };\n    }\n\n    if (sendMessage) {\n      const sendMessagePromise = sendMessage(updatedMessage);\n      logChatPromiseExecution(sendMessagePromise, 'send message');\n      clearGiphyFlag(isReply);\n    }\n  }, [inputHasGiphyMessage, sendMessage, clearGiphyFlag]);\n\n  return (\n      <>\n        <Window>\n          <TeamChannelHeader />\n          <MessageList disableQuotedMessages={true} pinPermissions={pinnedPermissions} />\n          <MessageInput grow overrideSubmitHandler={overrideSubmitHandler} />\n        </Window>\n        <Thread additionalMessageInputProps={{ grow: true, Input: ThreadMessageInput, overrideSubmitHandler }} />\n        <PinnedMessageList />\n    </>\n  );\n};\n","export const HashIcon = () => (\n  <svg width='72' height='72' viewBox='0 0 72 72' fill='none' xmlns='http://www.w3.org/2000/svg'>\n    <circle cx='36' cy='36' r='36' fill='var(--primary-color)' />\n    <path\n      d='M34.5368 33.696H38.5688L37.8548 38.904H33.7808L34.5368 33.696ZM29.2028 42.684L28.0268 51H32.1008L33.2768 42.684H37.3088L36.1748 51H40.2488L41.3828 42.684H45.0368V38.904H41.9288L42.6428 33.696H46.2968V29.916H43.1888L44.3228 21.6H40.2488L39.1148 29.916H35.0408L36.2168 21.6H32.1428L30.9668 29.916H26.9768V33.696H30.4628L29.7068 38.904H25.7168V42.684H29.2028Z'\n      fill='white'\n    />\n  </svg>\n);\n","import { Avatar, useChatContext } from 'stream-chat-react';\n\nimport { HashIcon } from './HashIcon';\n\nimport type { StreamChatType } from '../../types';\n\nexport const EmptyChannel = () => {\n  const { channel, client } = useChatContext<StreamChatType>();\n\n  const members = Object.values(channel?.state?.members || {}).filter(\n    ({ user }) => user?.id !== client.userID,\n  );\n\n  const getAvatarGroup = () => {\n    if (!members.length) return <Avatar size={72} />;\n\n    return (\n      <div className='channel-empty__avatars'>\n        {members.map((member, i) => {\n          if (i > 2) return null;\n          return (\n            <Avatar\n              key={i}\n              image={member.user?.image}\n              name={member.user?.name || member.user?.id}\n              size={72}\n            />\n          );\n        })}\n      </div>\n    );\n  };\n\n  const getUserText = () => {\n    if (members.length === 1) {\n      return (\n        <span className='channel-empty__user-name'>{`@${\n          members[0].user?.name || members[0].user?.id\n        }`}</span>\n      );\n    }\n\n    if (members.length === 2) {\n      return (\n        <span className='channel-empty__user-name'>{`@${\n          members[0].user?.name || members[0].user?.id\n        } and @${members[1].user?.name || members[1].user?.id}`}</span>\n      );\n    }\n\n    let memberString = '';\n\n    members.forEach((member, i) => {\n      if (i !== members.length - 1) {\n        memberString = `${memberString}@${member?.user?.name || member?.user?.id}, `;\n      } else {\n        memberString = `${memberString} and @${member?.user?.name || member?.user?.id}`;\n      }\n    });\n\n    return <span className='channel-empty__user-name'>{memberString || 'the Universe'}</span>;\n  };\n\n  return (\n    <div className='channel-empty__container'>\n      {channel?.type === 'team' ? <HashIcon /> : getAvatarGroup()}\n      <p className='channel-empty__main-description'>\n        This is the beginning of your chat history\n        {channel?.type === 'team' ? ' in ' : ' with '}\n        {channel?.type === 'team' ? `#${channel?.data?.name || channel?.data?.id}` : getUserText()}.\n      </p>\n      <p className='channel-empty__secondary-description'>Send messages, attachments, links, emojis, and more.</p>\n    </div>\n  );\n};\n","import clsx from 'clsx';\nimport { useMemo } from 'react';\nimport {\n  AttachmentPreviewList,\n  ChatAutoComplete,\n  EmojiPicker,\n  SendButton,\n  useChannelStateContext, useComponentContext,\n  useMessageInputContext,\n} from 'stream-chat-react';\nimport { useDropzone } from 'react-dropzone';\n\nimport { GiphyBadge } from './GiphyBadge';\nimport { MessageInputControlButton } from './MessageInputControls';\n\nimport { useGiphyInMessageContext } from '../../context/GiphyInMessageFlagContext';\nimport { useMessageInputCompositionControls } from './hooks/useMessageInputCompositionControls';\n\nimport type { StreamChatType } from '../../types';\n\nexport const TeamMessageInput = () => {\n  const {TypingIndicator} = useComponentContext();\n\n  const {\n    acceptedFiles = [],\n    multipleUploads,\n  } = useChannelStateContext<StreamChatType>();\n  const {\n    handleSubmit,\n    numberOfUploads,\n    text,\n    uploadNewFiles,\n    maxFilesLeft,\n    isUploadEnabled,\n    openEmojiPicker,\n    closeEmojiPicker,\n    emojiPickerIsOpen,\n  } = useMessageInputContext<StreamChatType>();\n  const { isComposingGiphyMessage } = useGiphyInMessageContext();\n  const {\n    formatting,\n    handleBoldButtonClick,\n    handleCodeButtonClick,\n    handleItalicsButtonClick,\n    handleStrikeThroughButtonClick,\n    onChange,\n    placeholder,\n  } = useMessageInputCompositionControls();\n\n\n  const accept = useMemo(\n    () =>\n      acceptedFiles.reduce<Record<string, Array<string>>>((mediaTypeMap, mediaType) => {\n        mediaTypeMap[mediaType] ??= [];\n        return mediaTypeMap;\n      }, {}),\n    [acceptedFiles],\n  );\n\n  const { getRootProps, isDragActive, isDragReject } = useDropzone({\n    accept,\n    disabled: !isUploadEnabled || maxFilesLeft === 0,\n    multiple: multipleUploads,\n    noClick: true,\n    onDrop: uploadNewFiles,\n  });\n\n\n  return (\n    <div {...getRootProps({ className: clsx(`team-message-input__wrapper`) })}>\n      {isDragActive && (\n        <div\n          className={clsx('str-chat__dropzone-container', {\n            'str-chat__dropzone-container--not-accepted': isDragReject,\n          })}\n        >\n          {!isDragReject && <p>Drag your files here</p>}\n          {isDragReject && <p>Some of the files will not be accepted</p>}\n        </div>\n      )}\n      <div className='team-message-input__input'>\n        <div className='team-message-input__top'>\n          {!!numberOfUploads && <AttachmentPreviewList />}\n          <div className='team-message-input__form'>\n            {isComposingGiphyMessage() && !numberOfUploads && <GiphyBadge />}\n            <ChatAutoComplete onChange={onChange} placeholder={placeholder} />\n\n            <SendButton\n              disabled={!numberOfUploads && !text.length}\n              sendMessage={handleSubmit}\n            />\n          </div>\n        </div>\n        <div className='team-message-input__bottom'>\n            <MessageInputControlButton type='emoji' onClick={emojiPickerIsOpen ? closeEmojiPicker : openEmojiPicker} />\n            <MessageInputControlButton type='bold' active={formatting === 'bold'} onClick={handleBoldButtonClick} />\n            <MessageInputControlButton type='italics' active={formatting === 'italics'} onClick={handleItalicsButtonClick} />\n            <MessageInputControlButton type='strike-through' active={formatting === 'strike-through'} onClick={handleStrikeThroughButtonClick} />\n            <MessageInputControlButton type='code' active={formatting === 'code'} onClick={handleCodeButtonClick} />\n        </div>\n      </div>\n      {TypingIndicator && <TypingIndicator />}\n      <EmojiPicker />\n    </div>\n  );\n};\n","import { useCallback, useMemo, useState } from 'react';\nimport { useChannelStateContext, useChatContext, useMessageInputContext } from 'stream-chat-react';\n\nimport { useGiphyInMessageContext } from '../../../context/GiphyInMessageFlagContext';\n\nimport { StreamChatType } from '../../../types';\n\nexport type MessageInputControlType = 'emoji' | 'bold' | 'italics' | 'code' | 'strike-through';\n\nexport const useMessageInputCompositionControls = () => {\n  const { client } = useChatContext<StreamChatType>();\n  const {\n    channel,\n  } = useChannelStateContext<StreamChatType>();\n  const messageInput = useMessageInputContext<StreamChatType>();\n  const { isComposingGiphyMessage, clearGiphyFlagMainInput, setComposeGiphyMessageFlag } = useGiphyInMessageContext();\n  const [formatting, setFormatting] = useState<MessageInputControlType | null>(null);\n\n  const placeholder = useMemo(() => {\n    let dynamicPart = 'the group';\n\n    if (channel.type === 'team') {\n      dynamicPart = `#${channel?.data?.name || channel?.data?.id || 'random'}`;\n\n    }\n\n    const members = Object.values(channel.state.members).filter(\n      ({ user }) => user?.id !== client.userID,\n    );\n    if (!members.length || members.length === 1) {\n      dynamicPart = members[0]?.user?.name || members[0]?.user?.id || 'Johnny Blaze';\n\n    }\n\n    return `Message ${dynamicPart}`;\n\n  }, [channel.type, channel.state.members, channel?.data?.id, channel?.data?.name, client.userID]);\n\n  const onChange: React.ChangeEventHandler<HTMLTextAreaElement> = useCallback(\n    (event) => {\n      const { value } = event.target;\n\n      const deletePressed =\n        event.nativeEvent instanceof InputEvent &&\n        event.nativeEvent.inputType === 'deleteContentBackward';\n\n      if (messageInput.text.length === 1 && deletePressed) {\n        clearGiphyFlagMainInput();\n      }\n\n      if (!isComposingGiphyMessage() && messageInput.text.startsWith('/giphy') && !messageInput.numberOfUploads) {\n        event.target.value = value.replace('/giphy', '');\n        setComposeGiphyMessageFlag();\n      }\n\n      if (formatting === 'bold') {\n        if (deletePressed) {\n          event.target.value = `${value.slice(0, value.length - 2)}**`;\n        } else {\n          event.target.value = `**${value.replace(/\\**/g, '')}**`;\n        }\n      } else if (formatting === 'code') {\n        if (deletePressed) {\n          event.target.value = `${value.slice(0, value.length - 1)}\\``;\n        } else {\n          event.target.value = `\\`${value.replace(/`/g, '')}\\``;\n        }\n      } else if (formatting === 'italics') {\n        if (deletePressed) {\n          event.target.value = `${value.slice(0, value.length - 1)}*`;\n        } else {\n          event.target.value = `*${value.replace(/\\*/g, '')}*`;\n        }\n      } else if (formatting === 'strike-through') {\n        if (deletePressed) {\n          event.target.value = `${value.slice(0, value.length - 2)}~~`;\n        } else {\n          event.target.value = `~~${value.replace(/~~/g, '')}~~`;\n        }\n      }\n\n      messageInput.handleChange(event);\n    },\n    [\n      formatting,\n      messageInput,\n      clearGiphyFlagMainInput,\n      isComposingGiphyMessage,\n      setComposeGiphyMessageFlag,\n    ],\n  );\n\n  const handleBoldButtonClick = useCallback(() => {\n    setFormatting((prev) => prev === 'bold' ? null : 'bold');\n  }, []);\n\n  const handleItalicsButtonClick = useCallback(() => {\n    setFormatting((prev) => prev === 'italics' ? null : 'italics')\n  }, []);\n\n  const handleStrikeThroughButtonClick = useCallback(() => {\n    setFormatting((prev) => prev === 'strike-through' ? null : 'strike-through')\n  }, []);\n\n  const handleCodeButtonClick = useCallback(() => {\n    setFormatting((prev) => prev === 'code' ? null : 'code')\n  }, []);\n\n  return {\n    formatting,\n    handleBoldButtonClick,\n    handleCodeButtonClick,\n    handleItalicsButtonClick,\n    handleStrikeThroughButtonClick,\n    placeholder,\n    onChange,\n  }\n}","import { useChatContext, useTypingContext } from 'stream-chat-react';\n\nimport type { StreamChatType } from '../../types';\n\nexport const TeamTypingIndicator = () => {\n  const { client } = useChatContext<StreamChatType>();\n\n  const { typing } = useTypingContext<StreamChatType>();\n\n  if (!client || !typing) return null;\n\n  const users = Object.values(typing)\n    .filter(({ user }) => user?.id !== client.user?.id)\n    .map(({ user }) => user?.name || user?.id);\n\n  if (!users.length) return null;\n\n  let text = 'Someone is typing';\n\n  if (users.length === 1) {\n    text = `${users[0]} is typing`;\n  } else if (users.length === 2) {\n    text = `${users[0]} and ${users[1]} are typing`;\n  } else if (users.length > 2) {\n    text = `${users[0]} and ${users.length - 1} more are typing`;\n  }\n\n  return (\n    <div className='typing-indicator__input'>\n      <div className='dots'>\n        <div className='dot' />\n        <div className='dot' />\n        <div className='dot' />\n      </div>\n      <div className='typing-indicator__input__text'>{text}</div>\n    </div>\n  );\n};\n","import { CloseThreadButton } from './CloseThreadButton';\nimport { ThreadHeaderProps } from 'stream-chat-react';\n\n\nexport const ThreadHeader = (props: ThreadHeaderProps) => {\n  const { closeThread, thread } = props;\n\n  const getReplyCount = () => {\n    if (!thread?.reply_count) return '';\n    if (thread.reply_count === 1) return '1 reply';\n    return `${thread.reply_count} replies`;\n  };\n\n  return (\n    <div className='custom-thread-header'>\n      <div className='workspace-header__block'>\n        <div className='workspace-header__title'>Thread</div>\n        <div className='workspace-header__subtitle'>{getReplyCount()}</div>\n      </div>\n      <CloseThreadButton onClick={closeThread} />\n    </div>\n  );\n};","import { Channel, SimpleReactionsList } from 'stream-chat-react';\n\nimport { AdminPanel } from '../AdminPanel/AdminPanel';\nimport { ChannelInner } from './ChannelInner';\nimport { EmptyChannel } from '../EmptyChannel/EmptyChannel';\nimport { TeamMessageInput } from '../TeamMessageInput/TeamMessageInput';\nimport {TeamTypingIndicator} from '../TeamTypingIndicator/TeamTypingIndicator';\nimport { ThreadHeader } from '../TeamChannelHeader/ThreadHeader';\nimport { TeamMessage } from '../TeamMessage/TeamMessage';\n\nimport { GiphyInMessageFlagProvider } from '../../context/GiphyInMessageFlagContext';\nimport { useWorkspaceController } from '../../context/WorkspaceController';\n\nconst LoadingIndicator = () => null;\n\nexport const ChannelContainer = () => {\n  const { activeWorkspace } = useWorkspaceController();\n\n  if (activeWorkspace.match('Admin')) {\n    return <AdminPanel/>;\n  }\n\n  return (\n    <div className='channel__container'>\n      <Channel\n        EmptyStateIndicator={EmptyChannel}\n        LoadingIndicator={LoadingIndicator}\n        Input={TeamMessageInput}\n        Message={TeamMessage}\n        ReactionsList={SimpleReactionsList}\n        ThreadHeader={ThreadHeader}\n        TypingIndicator={TeamTypingIndicator}\n      >\n        <GiphyInMessageFlagProvider>\n          <ChannelInner />\n        </GiphyInMessageFlagProvider>\n      </Channel>\n    </div>\n  );\n};\n","import type { Channel, ChannelFilters, StreamChat, UserResponse } from 'stream-chat';\n\nimport type { StreamChatType } from '../../types';\n\nexport type ChannelOrUserType =\n  | Channel<StreamChatType>\n  | UserResponse<StreamChatType>;\n\nexport const isChannel = (\n  channel: ChannelOrUserType,\n): channel is Channel<StreamChatType> =>\n  (channel as Channel<StreamChatType>).cid !== undefined;\n\ntype Props = {\n  client: StreamChat<StreamChatType>;\n  setActiveChannel: (\n    newChannel?: Channel<StreamChatType>,\n    watchers?: {\n      limit?: number;\n      offset?: number;\n    },\n    event?: React.SyntheticEvent,\n  ) => void;\n  user: UserResponse<StreamChatType>;\n};\n\nexport const channelByUser = async (props: Props) => {\n  const { client, setActiveChannel, user } = props;\n\n  const filters: ChannelFilters = {\n    type: 'messaging',\n    member_count: 2,\n    members: { $eq: [user.id as string, client.userID || ''] },\n  };\n\n  const [existingChannel] = await client.queryChannels(filters);\n\n  if (existingChannel) {\n    return setActiveChannel(existingChannel);\n  }\n\n  const newChannel = client.channel('messaging', {\n    members: [user.id as string, client.userID || ''],\n  });\n  return setActiveChannel(newChannel);\n};\n","import clsx from 'clsx';\nimport { Avatar, useChatContext } from 'stream-chat-react';\n\nimport { channelByUser, ChannelOrUserType, isChannel } from './utils';\n\nimport type { Channel, UserResponse } from 'stream-chat';\n\nimport type { StreamChatType } from '../../types';\n\ntype SearchResultProps = Pick<ResultsDropdownProps, 'focusedId' | 'setChannel'> & {\n  result: ChannelOrUserType;\n};\n\nconst SearchResult = (props: SearchResultProps) => {\n  const { focusedId, result, setChannel } = props;\n\n  const { client, setActiveChannel } = useChatContext<StreamChatType>();\n\n  if (isChannel(result)) {\n    const channel = result as Channel<StreamChatType>;\n\n    return (\n      <div\n        onClick={() => setChannel(channel)}\n        className={clsx(\n          'channel-search__result-container',\n          {highlighted: focusedId === channel.id}\n        )}\n      >\n        <div className='result-hashtag'>#</div>\n        <p className='channel-search__result-text'>{channel?.data?.name}</p>\n      </div>\n    );\n  } else {\n    const user = result as UserResponse<StreamChatType>;\n\n    return (\n      <div\n        onClick={() => {\n          channelByUser({ client, setActiveChannel, user });\n        }}\n        className={clsx(\n          'channel-search__result-container',\n          {highlighted: focusedId === user.id}\n        )}\n      >\n          <Avatar image={user.image} name={user.name || user.id} size={24} />\n          <p className='channel-search__result-text'>{user.name || user.id || 'Johnny Blaze'}</p>\n      </div>\n    );\n  }\n};\n\ntype ResultsDropdownProps = {\n  teamChannels?: Channel<StreamChatType>[];\n  directChannels?: UserResponse<StreamChatType>[];\n  focusedId: string;\n  loading: boolean;\n  setChannel: (\n    channel: Channel<StreamChatType>,\n  ) => void;\n  setQuery: React.Dispatch<React.SetStateAction<string>>;\n};\n\nexport const ResultsDropdown = (props: ResultsDropdownProps) => {\n  const { teamChannels, directChannels, focusedId, loading, setChannel, setQuery } = props;\n  document.addEventListener('click', () => setQuery(''));\n\n  return (\n    <div className='channel-search__results'>\n      <p className='channel-search__results-header'>Channels</p>\n      {loading && !teamChannels?.length && (\n        <p className='channel-search__results-header'>\n          <i>Loading...</i>\n        </p>\n      )}\n      {!loading && !teamChannels?.length ? (\n        <p className='channel-search__results-header'>\n          <i>No channels found</i>\n        </p>\n      ) : (\n        teamChannels?.map((channel, i) => (\n          <SearchResult result={channel} focusedId={focusedId} key={i} setChannel={setChannel} />\n        ))\n      )}\n      <p className='channel-search__results-header'>Users</p>\n      {loading && !directChannels?.length && (\n        <p className='channel-search__results-header'>\n          <i>Loading...</i>\n        </p>\n      )}\n      {!loading && !directChannels?.length ? (\n        <p className='channel-search__results-header'>\n          <i>No direct messages found</i>\n        </p>\n      ) : (\n        directChannels?.map((user: UserResponse<StreamChatType>, i) => (\n          <SearchResult result={user} focusedId={focusedId} key={i} setChannel={setChannel} />\n        ))\n      )}\n    </div>\n  );\n};\n","import { useCallback, useEffect, useState } from 'react';\n\nimport type { Channel, UserResponse } from 'stream-chat';\nimport { useChatContext } from 'stream-chat-react';\nimport _debounce from 'lodash.debounce';\n\nimport { channelByUser, ChannelOrUserType, isChannel } from './utils';\nimport { ResultsDropdown } from './ResultsDropdown';\n\nimport { SearchIcon } from '../../assets';\n\nimport type { StreamChatType } from '../../types';\n\nexport const ChannelSearch = () => {\n  const { client, setActiveChannel } = useChatContext<StreamChatType>();\n\n  const [allChannels, setAllChannels] = useState<ConcatArray<ChannelOrUserType> | undefined>();\n  const [teamChannels, setTeamChannels] = useState<\n    | Channel<StreamChatType>[]\n    | undefined\n  >();\n  const [directChannels, setDirectChannels] = useState<UserResponse<StreamChatType>[] | undefined>();\n\n  const [focused, setFocused] = useState<number>();\n  const [focusedId, setFocusedId] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [query, setQuery] = useState('');\n\n  const handleKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.key === 'ArrowDown') {\n        setFocused((prevFocused) => {\n          if (prevFocused === undefined || allChannels === undefined) return 0;\n          return prevFocused === allChannels.length - 1 ? 0 : prevFocused + 1;\n        });\n      } else if (event.key === 'ArrowUp') {\n        setFocused((prevFocused) => {\n          if (prevFocused === undefined || allChannels === undefined) return 0;\n          return prevFocused === 0 ? allChannels.length - 1 : prevFocused - 1;\n        });\n      } else if (event.key === 'Enter') {\n        event.preventDefault();\n\n        if (allChannels !== undefined && focused !== undefined) {\n          const channelToCheck = allChannels[focused];\n\n          if (isChannel(channelToCheck)) {\n            setActiveChannel(channelToCheck);\n          } else {\n            channelByUser({ client, setActiveChannel, user: channelToCheck });\n          }\n        }\n\n        setFocused(undefined);\n        setFocusedId('');\n        setQuery('');\n      }\n    },\n    [allChannels, client, focused, setActiveChannel], // eslint-disable-line react-hooks/exhaustive-deps\n  );\n\n  useEffect(() => {\n    if (query) {\n      document.addEventListener('keydown', handleKeyDown);\n    }\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [handleKeyDown, query]);\n\n  useEffect(() => {\n    if (!query) {\n      setTeamChannels([]);\n      setDirectChannels([]);\n    }\n  }, [query]);\n\n  useEffect(() => {\n    if (focused && focused >= 0 && allChannels) {\n      setFocusedId(allChannels[focused].id || '');\n    }\n  }, [allChannels, focused]);\n\n  const setChannel = (\n    channel: Channel<StreamChatType>,\n  ) => {\n    setQuery('');\n    setActiveChannel(channel);\n  };\n\n  const getChannels = async (text: string) => {\n    try {\n      const channelResponse = client.queryChannels(\n        {\n          type: 'team',\n          name: { $autocomplete: text },\n        },\n        {},\n        { limit: 5 },\n      );\n\n      const userResponse = client.queryUsers(\n        {\n          id: { $ne: client.userID || '' },\n          $and: [\n            { name: { $autocomplete: text } },\n          ],\n        },\n        { id: 1 },\n        { limit: 5 },\n      );\n\n      const [channels, { users }] = await Promise.all([channelResponse, userResponse]);\n\n      if (channels.length) setTeamChannels(channels);\n      if (users.length) setDirectChannels(users);\n      setAllChannels([...channels, ...users]);\n    } catch (event) {\n      setQuery('');\n    }\n\n    setLoading(false);\n  };\n\n  const getChannelsDebounce = _debounce(getChannels, 100, {\n    trailing: true,\n  });\n\n  const onSearch = (event: React.ChangeEvent<HTMLInputElement>) => {\n    event.preventDefault();\n\n    setLoading(true);\n    setFocused(undefined);\n    setQuery(event.target.value);\n    if (!event.target.value) return;\n\n    getChannelsDebounce(event.target.value);\n  };\n\n  return (\n    <div className='channel-search__container'>\n      <div className='channel-search__input__wrapper'>\n        <div className='channel-search__input__icon'>\n          <SearchIcon />\n        </div>\n        <input\n          onChange={onSearch}\n          placeholder='Search'\n          type='text'\n          value={query}\n        />\n      </div>\n      {query && (\n        <ResultsDropdown\n          teamChannels={teamChannels}\n          directChannels={directChannels}\n          focusedId={focusedId}\n          loading={loading}\n          setChannel={setChannel}\n          setQuery={setQuery}\n        />\n      )}\n    </div>\n  );\n};\n","import { MouseEventHandler } from 'react';\n\ntype AddChannelButtonProps = {\n  onClick: MouseEventHandler<HTMLButtonElement>;\n}\n\nexport const AddChannelButton = (\n  { onClick }: AddChannelButtonProps,\n) => (\n  <button onClick={onClick}>\n    <svg\n      width='14'\n      height='14'\n      viewBox='0 0 14 14'\n      fill='none'\n      xmlns='http://www.w3.org/2000/svg'\n    >\n      <path\n        d='M7 0C3.13438 0 0 3.13438 0 7C0 10.8656 3.13438 14 7 14C10.8656 14 14 10.8656 14 7C14 3.13438 10.8656 0 7 0ZM11 7.5H7.5V11H6.5V7.5H3V6.5H6.5V3H7.5V6.5H11V7.5Z'\n        fill='white'\n        fillOpacity='0.66'\n      />\n    </svg>\n  </button>\n);\n","import React, { PropsWithChildren, useCallback } from 'react';\n\nimport { AddChannelButton } from './AddChannelButton';\n\nimport { useWorkspaceController, Workspace } from '../../context/WorkspaceController';\n\nimport type { ChannelListMessengerProps } from 'stream-chat-react';\n\nexport type TeamChannelListProps = ChannelListMessengerProps & {\n  type: string;\n};\n\nconst ChannelList = (props: PropsWithChildren<TeamChannelListProps>) => {\n  const {\n    children,\n    error = false,\n    loading,\n    type,\n  } = props;\n\n  const { displayWorkspace } = useWorkspaceController();\n\n  const handleAddChannelClick = useCallback(() => {\n    displayWorkspace(`Admin-Admin-Channel-Create__${type}` as Workspace);\n  }, [type, displayWorkspace]);\n\n  if (error) {\n    return type === 'team' ? (\n      <div className='team-channel-list'>\n        <p className='team-channel-list__message'>\n          Connection error, please wait a moment and try again.\n        </p>\n      </div>\n    ) : null;\n  }\n\n  if (loading) {\n    return (\n      <div className='team-channel-list'>\n        <p className='team-channel-list__message loading'>\n          {type === 'team' ? 'Channels' : 'Messages'} loading....\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className='team-channel-list'>\n      <div className='team-channel-list__header'>\n        <p className='team-channel-list__header__title'>\n          {type === 'team' ? 'Channels' : 'Direct Messages'}\n        </p>\n        <AddChannelButton onClick={handleAddChannelClick}\n        />\n      </div>\n      {children}\n    </div>\n  );\n};\n\nexport const TeamChannelList = React.memo(ChannelList);\n","import { Avatar, ChannelPreviewUIComponentProps, useChatContext } from 'stream-chat-react';\n\nimport { StreamChatType } from '../../types';\n\ntype DirectMessagingChannelPreviewProps = Pick<ChannelPreviewUIComponentProps<StreamChatType>, 'channel'>;\n\nexport const DirectMessagingChannelPreview = ({channel}: DirectMessagingChannelPreviewProps) => {\n  const { client } = useChatContext<StreamChatType>();\n\n  const members = Object.values(channel.state.members).filter(\n    ({ user }) => user?.id !== client.userID,\n  );\n  const defaultName = 'Johnny Blaze';\n\n  if (!members.length || members.length === 1) {\n    const member = members[0];\n    return (\n      <div className='channel-preview__item single'>\n        <Avatar\n          image={member.user?.image}\n          name={member.user?.name || member.user?.id}\n          size={24}\n        />\n        <p>{member?.user?.name || member?.user?.id || defaultName}</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className='channel-preview__item multi'>\n        <span>\n          <Avatar\n            image={members[0].user?.image}\n            name={members[0].user?.name || members[0].user?.id}\n            size={18}\n          />\n        </span>\n      <Avatar\n        image={members[1].user?.image}\n        name={members[1].user?.name || members[1].user?.id}\n        size={18}\n      />\n      <p>\n        {members[0].user?.name || members[0].user?.id || defaultName},{' '}\n        {members[1].user?.name || members[1].user?.id || defaultName}\n      </p>\n    </div>\n  );\n};","export const TeamChannelPreview = ({name}: {name: string}) => (\n  <div className='channel-preview__item'>\n    <p>{`# ${name}`}</p>\n  </div>\n);","import clsx from 'clsx';\nimport { useCallback } from 'react';\nimport { ChannelPreviewUIComponentProps, useChatContext } from 'stream-chat-react';\n\nimport { DirectMessagingChannelPreview } from './DirectMessagingChannelPreview';\nimport { TeamChannelPreview } from './TeamChannelPreview';\n\nimport { useWorkspaceController } from '../../context/WorkspaceController';\n\nimport type { StreamChatType } from '../../types';\n\ntype TeamChannelPreviewProps = ChannelPreviewUIComponentProps<StreamChatType> & {\n  type: string;\n};\n\nexport const ChannelPreview = ({ channel, type }: TeamChannelPreviewProps) => {\n  const { channel: activeChannel, setActiveChannel } = useChatContext<StreamChatType>();\n  const { displayWorkspace } = useWorkspaceController();\n\n  const handleClick = useCallback(() => {\n    displayWorkspace('Chat');\n    if (setActiveChannel) {\n      setActiveChannel(channel);\n    }\n  }, [channel, displayWorkspace, setActiveChannel])\n\n  return (\n    <button\n      className={clsx('channel-preview', {selected: channel?.id === activeChannel?.id})}\n      onClick={handleClick}\n    >\n      {type === 'team'\n        ? <TeamChannelPreview name={channel?.data?.name || channel?.data?.id as string || 'random'}/>\n        : <DirectMessagingChannelPreview channel={channel}/>\n      }\n    </button>\n  );\n};\n","export const CompanyLogo = () => (\n  <svg width='22' height='16' viewBox='0 0 22 16' fill='none' xmlns='http://www.w3.org/2000/svg'>\n    <path\n      d='M17.0903 16L21.3143 0.291999H17.9263L15.3523 11.116H15.3083L12.6243 0.291999H9.39031L6.6623 10.984H6.6183L4.1323 0.291999H0.678305L4.8363 16H8.3343L10.9523 5.308H10.9963L13.6583 16H17.0903Z'\n      fill='var(--primary-color)'\n    />\n  </svg>\n);","import { ChannelList } from 'stream-chat-react';\n\nimport { ChannelSearch } from '../ChannelSearch/ChannelSearch';\nimport { TeamChannelList } from '../TeamChannelList/TeamChannelList';\nimport { ChannelPreview } from '../ChannelPreview/ChannelPreview';\n\nimport { CompanyLogo } from './icons';\n\nimport type { Channel, ChannelFilters } from 'stream-chat';\nimport { ChannelSort } from 'stream-chat';\n\nimport { StreamChatType } from '../../types';\n\nconst filters: ChannelFilters[] = [\n  { type: 'team', demo: 'team' },\n  { type: 'messaging', demo: 'team' },\n];\nconst options = { state: true, watch: true, presence: true, limit: 3 };\nconst sort: ChannelSort<StreamChatType> = { last_message_at: -1, updated_at: -1 };\n\nconst FakeCompanySelectionBar = () => (\n  <div className='sidebar__company-selection-bar'>\n    <div className='sidebar__company-badge'>\n        <CompanyLogo />\n    </div>\n  </div>\n);\n\nconst customChannelTeamFilter = (channels: Channel[]) => {\n  return channels.filter((channel) => channel.type === 'team');\n};\n\nconst customChannelMessagingFilter = (channels: Channel[]) => {\n  return channels.filter((channel) => channel.type === 'messaging');\n};\n\nconst TeamChannelsList = () => (\n  <ChannelList\n    channelRenderFilterFn={customChannelTeamFilter}\n    filters={filters[0]}\n    options={options}\n    sort={sort}\n    List={(listProps) => (\n      <TeamChannelList\n        {...listProps}\n        type='team'\n      />\n    )}\n    Preview={(previewProps) => (\n      <ChannelPreview\n        {...previewProps}\n        type='team'\n      />\n    )}\n  />\n);\n\nconst MessagingChannelsList = () => (\n  <ChannelList\n    channelRenderFilterFn={customChannelMessagingFilter}\n    filters={filters[1]}\n    options={options}\n    sort={sort}\n    setActiveChannelOnMount={false}\n    List={(listProps) => (\n      <TeamChannelList\n        {...listProps}\n        type='messaging'\n      />\n    )}\n    Preview={(previewProps) => (\n      <ChannelPreview\n        {...previewProps}\n        type='messaging'\n      />\n    )}\n  />\n)\n\nexport const Sidebar = () => {\n  return (\n    <div className='sidebar'>\n      <FakeCompanySelectionBar />\n      <div className='channel-list-bar'>\n        <div className='channel-list-bar__header'>\n          <p className='channel-list-bar__header__text'>Worksly</p>\n        </div>\n        <ChannelSearch />\n        <TeamChannelsList/>\n        <MessagingChannelsList/>\n      </div>\n    </div>\n  );\n};\n","import { useEffect } from 'react';\nimport { StreamChat } from 'stream-chat';\nimport { Chat, enTranslations, Streami18n } from 'stream-chat-react';\n\nimport { getRandomImage } from './assets';\nimport { useChecklist } from './ChecklistTasks';\nimport { ChannelContainer } from './components/ChannelContainer/ChannelContainer';\nimport { Sidebar } from './components/Sidebar/Sidebar';\n\nimport { WorkspaceController } from './context/WorkspaceController';\n\nimport type { StreamChatType } from './types';\n\nconst urlParams = new URLSearchParams(window.location.search);\n\nconst apiKey = urlParams.get('apikey') || process.env.REACT_APP_STREAM_KEY;\nconst user = urlParams.get('user') || process.env.REACT_APP_USER_ID;\nconst theme = urlParams.get('theme') || 'light';\nconst userToken = urlParams.get('user_token') || process.env.REACT_APP_USER_TOKEN;\nconst targetOrigin = urlParams.get('target_origin') || process.env.REACT_APP_TARGET_ORIGIN;\n\nconst i18nInstance = new Streami18n({\n  language: 'en',\n  translationsForLanguage: {\n    ...enTranslations,\n  },\n});\n\nconst client = StreamChat.getInstance<StreamChatType>(apiKey!, { enableInsights: true, enableWSFallback: true });\nclient.connectUser({ id: user!, name: user, image: getRandomImage() }, userToken);\n\nconst App = () => {\n  useChecklist({ chatClient: client, targetOrigin: targetOrigin! });\n\n  useEffect(() => {\n    const handleColorChange = (color: string) => {\n      const root = document.documentElement;\n      if (color.length && color.length === 7) {\n        root.style.setProperty('--primary-color', `${color}E6`);\n        root.style.setProperty('--primary-color-alpha', `${color}1A`);\n      }\n    };\n\n    window.addEventListener('message', (event) => handleColorChange(event.data));\n    return () => {\n      client.disconnectUser();\n      window.removeEventListener('message', (event) => handleColorChange(event.data));\n    };\n  }, []);\n\n  return (\n    <>\n      <div className='app__wrapper str-chat'>\n        <Chat {...{ client, i18nInstance }} theme={`team ${theme}`}>\n          <WorkspaceController>\n            <Sidebar />\n            <ChannelContainer />\n          </WorkspaceController>\n        </Chat>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport App from './App';\nimport { createRoot } from 'react-dom/client';\n\nimport './styles/index.scss';\n\ncreateRoot(document.getElementById('root')!).render(\n  // <React.StrictMode>\n    <App />\n  // </React.StrictMode>,\n);"],"sourceRoot":""}